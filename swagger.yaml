swagger: '2.0'
schemes:
  - http
basePath: ../
info:
  version: '2.0'
  title: Marathon REST
  description: ''
consumes:
  - application/json
produces:
  - application/json
paths:
  /v2/apps:
    parameters: []
    get:
      description: Get the list of running applications. Several filters can be applied via the following query parameters.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: cmd
          in: query
          description: Filter the result to only return apps whose `cmd` field contains the given value
          required: false
          type: string
        - name: id
          in: query
          description: Filter the result to only return apps whose `id` is or contains the given value
          required: false
          type: string
        - name: label
          in: query
          description: |-
            A label selector query contains one or more label selectors, which are comma separated. Marathon supports three types of selectors existence-based, equality-based and set-based. In the case of multiple selectors, all must be satisfied so comma separator acts as an AND logical operator. Labels and values must consist of alphanumeric characters plus `-` `_` and `.` `-A-Za-z0-9_.`. Any other character is possible, but must be escaped with a backslash character.
            * <code>Existence based Selector Query</code> Matches the existence of a label <br/> Example&#58; my_label,environment
            * <code>Equality based Selector Query</code> Matches existence of labels and the (non) equality of the value.<br/> Example&#58; environment==production, tier!=frontend
            * <code>Set based Selector Query</code> Matches existence of labels and the (non) existence of the value in a given set<br/> Example&#58; environment in (stage,production), tier notin (frontend, service)
          required: false
          type: string
        - name: embed
          in: query
          description: |-
            Embeds nested resources that match the supplied path. You can specify this parameter multiple times with different values.
            - <code>apps.tasks</code> embed all tasks of each application<br/> Note&#58; if this embed is definded, it automatically sets <code>apps.deployments</code> but this will change in a future release. Please define all embeds explicitly.
            - <code>apps.counts</code> embed all task counts (tasksStaged, tasksRunning, tasksHealthy, tasksUnhealthy) <br/> Note&#58; currently embedded by default but this will change in a future release. Please define all embeds explicitly.
            - <code>apps.deployments</code> embed all deployment identifier, if the related app currently is in deployment.
            - <code>apps.lastTaskFailure</code> embeds the lastTaskFailure for the application if there is one.
            - <code>apps.failures</code> Shorthand for apps.lastTaskFailure, apps.tasks, apps.counts and apps.deployments.<br/> Note&#58; deprecated and will be removed in future versions Please define all embeds explicitly.
            - <code>apps.taskStats</code> exposes task statatistics in the JSON.
          required: false
          type: string
          enum:
            - apps.tasks
            - apps.count
            - apps.deployments
            - apps.lastTaskFailure
            - apps.failures
            - apps.taskStats
      responses:
        '200':
          description: The list of applications that match the defined filters
          examples:
            application/json:
              apps:
                - id: /myapp
                  cmd: 'env && sleep 60'
                  args: null
                  user: null
                  env:
                    LD_LIBRARY_PATH: /usr/local/lib/myLib
                  instances: 3
                  cpus: 0.1
                  mem: 5
                  disk: 0
                  executor: ''
                  constraints:
                    - - hostname
                      - UNIQUE
                      - ''
                  uris:
                    - 'https://raw.github.com/mesosphere/marathon/master/README.md'
                  storeUrls: []
                  ports:
                    - 10013
                    - 10015
                  requirePorts: false
                  backoffSeconds: 1
                  backoffFactor: 1.15
                  maxLaunchDelaySeconds: 3600
                  container: null
                  healthChecks: []
                  dependencies: []
                  upgradeStrategy:
                    minimumHealthCapacity: 1
                    maximumOverCapacity: 1
                  labels: {}
                  acceptedResourceRoles: null
                  version: '2015-09-25T15:13:48.343Z'
                  versionInfo:
                    lastScalingAt: '2015-09-25T15:13:48.343Z'
                    lastConfigChangeAt: '2015-09-25T15:13:48.343Z'
                  tasksStaged: 0
                  tasksRunning: 0
                  tasksHealthy: 0
                  tasksUnhealthy: 0
                  deployments:
                    - id: 9538079c-3898-4e32-aa31-799bf9097f74
        '401':
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          examples:
            application/json:
              message: Invalid username or password.
        '403':
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          examples:
            application/json:
              message: 'Not Authorized to perform this action!'
      summary: ''
    put:
      description: |-
        Change multiple applications either by upgrading existing ones or creating new ones. If there is an update to an already running application, the application gets upgraded. All instances of this application get replaced by the new version. The order of dependencies will be applied correctly. The upgradeStrategy defines the behaviour of the upgrade.
        If the id of the application is not known, the application gets started. The order of dependencies will be applied correctly. It is possible to mix upgrades and installs.
        If you have more complex scenarios with upgrades, use the groups endpoint.
        Note&#58;  This operation will create a deployment. The operation finishes, if the deployment succeeds. You can query the deployments endoint to see the status of the deployment.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: force
          in: query
          description: |-
            Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.
            Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
          required: false
          type: boolean
      responses:
        '200':
          description: 'A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, than this means it is finished. As long as the deployment runs, the effect of that change operation is visible only partially.'
          examples:
            application/json:
              deploymentId: 5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43
              version: '2015-09-29T15:59:51.164Z'
        '400':
          description: The application definition provided in the body is not valid.
          examples:
            application/json:
              message: Invalid JSON
              details:
                - path: /id
                  errors:
                    - error.expected.jsstring
        '401':
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          examples:
            application/json:
              message: Invalid username or password.
        '403':
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          examples:
            application/json:
              message: 'Not Authorized to perform this action!'
        '409':
          description: There is an already deployed application with this name
          examples:
            application/json:
              message: 'An app with id [/existing_app] already exists.'
        '422':
          description: 'The entity send can not be preocessed, since there are validation errors'
          examples:
            application/json:
              message: Object is not valid
              details:
                - attribute: upgradeStrategy.minimumHealthCapacity
                  error: is greater than 1
      summary: ''
    post:
      description: |-
        Create and start a new application.
        Note&#58;  This operation will create a deployment. The operation finishes, if the deployment succeeds. You can query the deployments endoint to see the status of the deployment.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          schema:
            $schema: 'http://json-schema.org/schema#'
            additionalProperties: false
            definitions:
              pathType:
                type: string
                pattern: "^(\\/?((\\.{2})|([a-z0-9][a-z0-9\\-.]*[a-z0-9]+)|([a-z0-9]*))($|\\/))+$"
                minLength: 1
            not:
              allOf:
                - required:
                    - cmd
                - required:
                    - args
            properties:
              acceptedResourceRoles:
                items:
                  type: string
                type: array
                description: 'Optional. A list of resource roles. Marathon considers only resource offers with roles in this list for launching tasks of this app. If you do not specify this, Marathon considers all resource offers with roles that have been configured by the `--default_accepted_resource_roles` command line flag. If no `--default_accepted_resource_roles` was given on startup, Marathon considers all resource offers. To register Marathon for a role, you need to specify the `--mesos_role` command line flag on startup. If you want to assign all resources of a slave to a role, you can use the `--default_role` argument when starting up the slave. If you need a more fine-grained configuration, you can use the `--resources` argument to specify resource shares per role. The Mesos master needs to be started with `--roles` followed by a comma-separated list of all roles you want to use across your cluster. See [the Mesos command line documentation](http://mesos.apache.org/documentation/latest/configuration/) for details.'
              args:
                items:
                  type: string
                type: array
                description: An array of strings that represents an alternative mode of specifying the command to run. This was motivated by safe usage of containerizer features like a custom Docker ENTRYPOINT. This args field may be used in place of cmd even when using the default command executor. This change mirrors API and semantics changes in the Mesos CommandInfo protobuf message starting with version `0.20.0`.  Either `cmd` or `args` must be supplied. It is invalid to supply both `cmd` and `args` in the same app.
              backoffFactor:
                minimum: 1
                type: number
                description: Configures exponential backoff behavior when launching potentially sick apps. This prevents sandboxes associated with consecutively failing tasks from filling up the hard disk on Mesos slaves. The backoff period is multiplied by the factor for each consecutive failure until it reaches maxLaunchDelaySeconds. This applies also to tasks that are killed due to failing too many health checks.
              backoffSeconds:
                description: Configures exponential backoff behavior when launching potentially sick apps. This prevents sandboxes associated with consecutively failing tasks from filling up the hard disk on Mesos slaves. The backoff period is multiplied by the factor for each consecutive failure until it reaches maxLaunchDelaySeconds. This applies also to tasks that are killed due to failing too many health checks.
                minimum: 0
                type: integer
              cmd:
                description: 'The command that is executed.  This value is wrapped by Mesos via `/bin/sh -c ${app.cmd}`.  Either `cmd` or `args` must be supplied. It is invalid to supply both `cmd` and `args` in the same app.'
                type: string
                minLength: 1
              constraints:
                type: array
                items:
                  type: array
                  items:
                    - type: string
                    - type: string
                      enum:
                        - UNIQUE
                        - CLUSTER
                        - GROUP_BY
                        - LIKE
                        - UNLIKE
                    - type: string
                  minItems: 2
                  additionalItems: false
                description: 'Valid constraint operators are one of UNIQUE, CLUSTER, GROUP_BY, LIKE, UNLIKE.'
              container:
                additionalProperties: false
                properties:
                  docker:
                    additionalProperties: false
                    properties:
                      forcePullImage:
                        type: boolean
                        description: 'The container will be pulled, regardless if it is already available on the local system.'
                      image:
                        type: string
                        minLength: 1
                        description: The name of the docker image to use.
                      network:
                        type: string
                        description: 'The networking mode, this container should operate in. One of BRIDGED|HOST|NONE'
                        enum:
                          - BRIDGE
                          - HOST
                          - NONE
                      parameters:
                        type: array
                        description: 'Allowing arbitrary parameters to be passed to docker CLI. Note that anything passed to this field is not guaranteed to be supported moving forward, as we might move away from the docker CLI.'
                        items:
                          type: object
                          additionalProperties: false
                          properties:
                            key:
                              type: string
                              minLength: 1
                              description: Key of this parameter
                            value:
                              type: string
                              description: Value of this parameter
                          required:
                            - key
                            - value
                      portMappings:
                        type: array
                        items:
                          type: object
                          additionalProperties: false
                          properties:
                            containerPort:
                              type: integer
                              description: 'Refers to the port the application listens to inside of the container. It is optional and now defaults to 0, in which case Marathon assigns the container port the same value as the assigned hostPort. This is especially useful for apps that advertise the port they are listening on to the outside world for P2P communication. Without containerPort: 0 they would erroneously advertise their private container port which is usually not the same as the externally visible host port.'
                              maximum: 65535
                              minimum: 0
                            hostPort:
                              type: integer
                              description: 'Retains the traditional meaning in Marathon, which is a random port from the range included in the Mesos resource offer. The resulting host ports for each task are exposed via the task details in the REST API and the Marathon web UI. hostPort is optional and defaults to 0.'
                              maximum: 65535
                              minimum: 0
                            protocol:
                              type: string
                              description: parameter is optional and defaults to tcp.
                            servicePort:
                              type: integer
                              description: 'Is a helper port intended for doing service discovery using a well-known port per service. The assigned servicePort value is not used/interpreted by Marathon itself but supposed to used by load balancer infrastructure. See Service Discovery Load Balancing doc page. The servicePort parameter is optional and defaults to 0. Like hostPort, If the value is 0, a random port will be assigned. If a servicePort value is assigned by Marathon then Marathon guarantees that its value is unique across the cluster. The values for random service ports are in the range [local_port_min, local_port_max] where local_port_min and local_port_max are command line options with default values of 10000 and 20000, respectively.'
                              maximum: 65535
                              minimum: 0
                      privileged:
                        type: boolean
                        description: Run this docker image in privileged mode.
                    required:
                      - image
                    type: object
                  type:
                    type: string
                    description: Supported container types at the moment are DOCKER and MESOS.
                    enum:
                      - MESOS
                      - DOCKER
                  volumes:
                    items:
                      additionalProperties: false
                      properties:
                        containerPath:
                          type: string
                          description: The path of the volume in the container
                          minLength: 1
                        hostPath:
                          type: string
                          description: The path of the volume on the host
                          minLength: 1
                        persistent:
                          additionalProperties: false
                          properties:
                            size:
                              type: integer
                              description: The size of the persistent volume in MiB
                              minimum: 0
                          type: object
                        mode:
                          type: string
                          description: Possible values are RO for ReadOnly and RW for Read/Write
                          enum:
                            - RO
                            - RW
                      type: object
                    type: array
                type: object
              cpus:
                type: number
                description: 'The number of CPU shares this application needs per instance. This number does not have to be integer, but can be a fraction.'
                minimum: 0
              dependencies:
                type: array
                description: 'A list of services upon which this application depends. An order is derived from the dependencies for performing start/stop and upgrade of the application. For example, an application /a relies on the services /b which itself relies on /c. To start all 3 applications, first /c is started than /b than /a.'
                items:
                  $ref: '#/definitions/pathType'
              disk:
                type: number
                description: 'How much disk space is needed for this application. This number does not have to be an integer, but can be a fraction.'
                minimum: 0
              env:
                patternProperties:
                  '.*':
                    type: string
                type: object
              executor:
                type: string
                description: 'The executor to use to launch this application. Different executors are available. The simplest one (and the default if none is given) is //cmd, which takes the cmd and executes that on the shell level.'
                pattern: "^(|\\/\\/cmd|\\/?[^\\/]+(\\/[^\\/]+)*)$"
              fetch:
                type: array
                description: Provided URIs are passed to Mesos fetcher module and resolved in runtime.
                items:
                  type: object
                  additionalProperties: false
                  properties:
                    uri:
                      type: string
                      description: URI to be fetched by Mesos fetcher module
                    executable:
                      type: boolean
                      description: Set fetched artifact as executable
                    extract:
                      type: boolean
                      description: Extract fetched artifact if supported by Mesos fetcher module
                    cache:
                      type: boolean
                      description: Cache fetched artifact if supported by Mesos fetcher module
                  required:
                    - uri
              healthChecks:
                items:
                  type: object
                  additionalProperties: false
                  properties:
                    command:
                      type: object
                      items:
                        additionalProperties: false
                        properties:
                          value:
                            type: string
                            description: The health check command to execute.
                    gracePeriodSeconds:
                      type: integer
                      description: Health check failures are ignored within this number of seconds of the task being started or until the task becomes healthy for the first time.
                      minimum: 0
                    ignoreHttp1xx:
                      type: boolean
                      description: Ignore HTTP 1xx responses.
                    intervalSeconds:
                      type: integer
                      description: Number of seconds to wait between health checks.
                      minimum: 0
                    maxConsecutiveFailures:
                      type: integer
                      description: Number of consecutive health check failures after which the unhealthy task should be killed.
                      minimum: 0
                    path:
                      type: string
                      description: 'Path to endpoint exposed by the task that will provide health status. Example: /path/to/health. Note: only used if protocol == HTTP[S].'
                    port:
                      type: integer
                      description: 'The specific port to connect to. In case of dynamic ports, see portIndex.'
                      maximum: 65535
                      minimum: 0
                    portIndex:
                      type: integer
                      description: "Index in this app's ports array to be used for health requests. An index is used so the app can use random ports, like [0, 0, 0] for example, and tasks could be started with port environment variables like $PORT1."
                      minimum: 0
                    protocol:
                      type: string
                      description: 'Protocol of the requests to be performed. One of HTTP, HTTPS, TCP or COMMAND.'
                      enum:
                        - HTTP
                        - HTTPS
                        - TCP
                        - COMMAND
                    timeoutSeconds:
                      type: integer
                      description: Number of seconds after which a health check is considered a failure regardless of the response.
                      minimum: 0
                type: array
              id:
                $ref: '#/definitions/pathType'
                description: 'Unique identifier for the app consisting of a series of names separated by slashes. Each name must be at least 1 character and may only contain digits (`0-9`), dashes (`-`), dots (`.`), and lowercase letters (`a-z`). The name may not begin or end with a dash.'
              instances:
                type: integer
                description: 'The number of instances of this application to start. Please note: this number can be changed any time as needed to scale the application.'
                minimum: 0
              labels:
                type: object
                description: 'Attaching metadata to apps can be useful to expose additional information to other services, so we added the ability to place labels on apps (for example, you could label apps staging and production to mark services by their position in the pipeline).'
                additionalProperties:
                  type: string
              maxLaunchDelaySeconds:
                type: integer
                description: Configures exponential backoff behavior when launching potentially sick apps. This prevents sandboxes associated with consecutively failing tasks from filling up the hard disk on Mesos slaves. The backoff period is multiplied by the factor for each consecutive failure until it reaches maxLaunchDelaySeconds. This applies also to tasks that are killed due to failing too many health checks.
                minimum: 0
              mem:
                type: number
                description: The amount of memory in MB that is needed for the application per instance.
                minimum: 0
              ipAddress:
                type: object
                description: "If an application definition includes the 'ipAddress' field, then Marathon will request a per-task IP from Mesos. A separate ports/portMappings configuration is then disallowed."
                properties:
                  discovery:
                    type: object
                    description: Information useful for service discovery.
                    properties:
                      ports:
                        type: array
                        description: Array of objects describing the ports exposed by each task.
                        items:
                          type: object
                          description: Port
                          properties:
                            number:
                              maximum: 65535
                              minimum: 0
                              type: integer
                              description: The port number.
                            name:
                              type: string
                              description: Name of the port.
                              pattern: '^[a-z][a-z0-9-]*$'
                            protocol:
                              enum:
                                - tcp
                                - udp
                              description: "Protocol of the port (one of ['tcp', 'udp'])."
                  groups:
                    type: array
                    description: Array of network groups. One IP address can belong to zero or more network groups. The idea is that containers can only reach containers with which they share at least one network group.
                    items:
                      type: string
                      description: The name of the network group.
                  labels:
                    type: object
                    description: Key value pair for meta data on that network interface.
                    properties: {}
                    additionalProperties: true
              ports:
                type: array
                description: 'An array of required port resources on the agent host. The number of items in the array determines how many dynamic ports are allocated for every task. For every port that is zero, a globally unique (cluster-wide) port is assigned and provided as part of the app definition to be used in load balancing definitions.'
                items:
                  maximum: 65535
                  minimum: 0
                  type: integer
              residency:
                type: object
                description: 'When using local persistent volumes that pin tasks onto agents, these values define how Marathon handles terminal states of these tasks.'
                properties:
                  relaunchEscalationTimeoutSeconds:
                    type: integer
                    description: "When a task using persistent local volumes cannot be restarted on the agent it's been pinned to, Marathon will try to launch this task on another node after this timeout. Defaults to 3600 (one hour)."
                    minimum: 0
                    additionalProperties: false
                  taskLostBehavior:
                    type: string
                    description: 'When Marathon receives a TASK_LOST status update indicating that the agent running the task is gone, this property defines whether Marathon will launch the task on another node or not. Defaults to WAIT_FOREVER'
                    enum:
                      - WAIT_FOREVER
                      - RELAUNCH_AFTER_TIMEOUT
                    additionalProperties: false
                additionalProperties: false
              requirePorts:
                type: boolean
                description: 'Normally, the host ports of your tasks are automatically assigned. This corresponds to the requirePorts value false which is the default. If you need more control and want to specify your host ports in advance, you can set requirePorts to true. This way the ports you have specified are used as host ports. That also means that Marathon can schedule the associated tasks only on hosts that have the specified ports available.'
              storeUrls:
                type: array
                description: "URL's that have to be resolved and put into the artifact store, before the task will be started."
                items:
                  type: string
                  minLength: 1
              upgradeStrategy:
                type: object
                description: During an upgrade all instances of an application get replaced by a new version. The upgradeStrategy controls how Marathon stops old versions and launches new versions.
                additionalProperties: false
                properties:
                  maximumOverCapacity:
                    type: number
                    description: A number between 0 and 1 which is multiplied with the instance count. This is the maximum number of additional instances launched at any point of time during the upgrade process.
                    maximum: 1
                    minimum: 0
                  minimumHealthCapacity:
                    type: number
                    description: 'A number between 0 and 1 that is multiplied with the instance count. This is the minimum number of healthy nodes that do not sacrifice overall application purpose. Marathon will make sure, during the upgrade process, that at any point of time this number of healthy instances are up.'
                    maximum: 1
                    minimum: 0
              uris:
                type: array
                description: 'URIs defined here are resolved, before the application gets started. If the application has external dependencies, they should be defined here.'
                items:
                  type: string
                  minLength: 1
              user:
                type: string
                description: The user to use to run the tasks on the agent.
              version:
                type: string
                description: The version of this definition.
                format: date-time
              versionInfo:
                type: object
                description: Detailed version information.
                additionalProperties: false
                properties:
                  lastScalingAt:
                    type: string
                    description: Contains the time stamp of the last change to this app which was not simply a scaling or a restarting configuration.
                    format: date-time
                  lastConfigChangeAt:
                    type: string
                    description: 'Contains the time stamp of the last change including changes like scaling or restarting the app. Since our versions are time based, this is currently equal to version.'
                    format: date-time
            required:
              - id
            type: object
      responses:
        '201':
          description: The application has been created and a deployment is started.
          examples:
            application/json:
              id: /foo
              instances: 2
              cmd: sleep 1000
              cpus: 0.1
              disk: 0
              mem: 16
              acceptedResourceRoles:
                - mesos_role
              args:
                - sleep
                - '100'
              backoffFactor: 1.15
              backoffSeconds: 1
              constraints:
                - - hostname
                  - LIKE
                  - 'srv2.*'
              container:
                docker:
                  forcePullImage: false
                  image: 'mesosphere:marathon/latest'
                  network: BRIDGE
                  parameters:
                    - key: name
                      value: kdc
                  portMappings:
                    - containerPort: 80
                      hostPort: 0
                      protocol: tcp
                      servicePort: 10019
                  privileged: false
                type: DOCKER
                volumes:
                  - containerPath: /docker_storage
                    hostPath: /hdd/tools/docker/registry
                    mode: RW
              dependencies:
                - /prod/group
              env:
                XPS1: Test
                XPS2: Rest
              executor: ''
              healthChecks:
                - gracePeriodSeconds: 300
                  ignoreHttp1xx: false
                  intervalSeconds: 20
                  maxConsecutiveFailures: 3
                  path: /
                  portIndex: 0
                  protocol: HTTP
                  timeoutSeconds: 20
              labels:
                owner: zeus
                note: Away from olympus
              maxLaunchDelaySeconds: 3600
              ipAddress:
                discovery:
                  ports:
                    - number: 8080
                      name: rest_endpoint
                      protocol: tcp
                groups:
                  - dev
                labels:
                  environment: dev
              ports:
                - 0
              requirePorts: false
              upgradeStrategy:
                maximumOverCapacity: 1
                minimumHealthCapacity: 1
              fetch:
                - uri: 'https://foo.com/setup.py'
                - uri: 'https://foo.com/archive.zip'
                  executable: false
                  extract: true
                  cache: true
              user: root
        '400':
          description: The application definition provided in the body is not valid.
          examples:
            application/json:
              message: Invalid JSON
              details:
                - path: /id
                  errors:
                    - error.expected.jsstring
        '401':
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          examples:
            application/json:
              message: Invalid username or password.
        '403':
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          examples:
            application/json:
              message: 'Not Authorized to perform this action!'
        '409':
          description: There is an already deployed application with this name
          examples:
            application/json:
              message: 'An app with id [/existing_app] already exists.'
        '422':
          description: 'The entity send can not be preocessed, since there are validation errors'
          examples:
            application/json:
              message: Object is not valid
              details:
                - attribute: upgradeStrategy.minimumHealthCapacity
                  error: is greater than 1
      summary: ''
  '/v2/apps/{app_id}':
    parameters:
      - name: app_id
        in: path
        description: app_id
        required: true
        type: string
    get:
      description: 'Get the application with id `app_id`. The response includes some status information besides the current configuration of the app. You can specify optional embed arguments, to get more embedded information.'
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: embed
          in: query
          description: |-
            Embeds nested resources that match the supplied path. You can specify this parameter multiple times with different values. <br/>
            - <code>app.tasks</code>. embed tasks Note&#58; if this embed is definded, it automatically sets <code>apps.deployments</code> but this will change in a future release. Please define all embeds explicitly.
            - <code>app.counts</code>. embed all task counts (tasksStaged, tasksRunning, tasksHealthy, tasksUnhealthy) <br/> Note&#58; currently embedded by default but this will change in a future release. Please define all embeds explicitly.
            - <code>app.deployments</code>. embed all deployment identifier, if the related app currently is in deployment.
            - <code>app.lastTaskFailure</code> embeds the lastTaskFailure for the application if there is one.
            - <code>app.failures</code> Shorthand for apps.lastTaskFailure, apps.tasks, apps.counts and apps.deployments.<br/> Note&#58; deprecated and will be removed in future versions Please define all embeds explicitly.
            - <code>app.taskStats</code> exposes task statatistics in the JSON.
          required: false
          type: string
          enum:
            - app.tasks
            - app.count
            - app.deployments
            - app.lastTaskFailure
            - app.failures
            - app.taskStats
      responses:
        '200':
          description: ''
          examples:
            application/json:
              apps:
                - id: /myapp
                  cmd: 'env && sleep 60'
                  args: null
                  user: null
                  env:
                    LD_LIBRARY_PATH: /usr/local/lib/myLib
                  instances: 3
                  cpus: 0.1
                  mem: 5
                  disk: 0
                  executor: ''
                  constraints:
                    - - hostname
                      - UNIQUE
                      - ''
                  uris:
                    - 'https://raw.github.com/mesosphere/marathon/master/README.md'
                  storeUrls: []
                  ports:
                    - 10013
                    - 10015
                  requirePorts: false
                  backoffSeconds: 1
                  backoffFactor: 1.15
                  maxLaunchDelaySeconds: 3600
                  container: null
                  healthChecks: []
                  dependencies: []
                  upgradeStrategy:
                    minimumHealthCapacity: 1
                    maximumOverCapacity: 1
                  labels: {}
                  acceptedResourceRoles: null
                  version: '2015-09-25T15:13:48.343Z'
                  versionInfo:
                    lastScalingAt: '2015-09-25T15:13:48.343Z'
                    lastConfigChangeAt: '2015-09-25T15:13:48.343Z'
                  tasksStaged: 0
                  tasksRunning: 0
                  tasksHealthy: 0
                  tasksUnhealthy: 0
                  deployments:
                    - id: 9538079c-3898-4e32-aa31-799bf9097f74
        '401':
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          examples:
            application/json:
              message: Invalid username or password.
        '403':
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          examples:
            application/json:
              message: 'Not Authorized to perform this action!'
        '404':
          description: No task found with this `app_id`.
          examples:
            application/json:
              message: "App '/not_existent' does not exist"
      summary: ''
    put:
      description: |-
        Replaces parameters of a running application. If no application with the given id exists, it will be created. If there is an application with this id, all running instances get upgraded to the new definition.

        Note&#58;  This operation will create a deployment. The operation finishes, if the deployment succeeds. You can query the deployments endoint to see the status of the deployment.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: force
          in: query
          description: |-
            Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.
            Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
          required: false
          type: boolean
        - name: body
          in: body
          schema:
            $schema: 'http://json-schema.org/schema#'
            additionalProperties: false
            definitions:
              pathType:
                type: string
                pattern: "^(\\/?((\\.{2})|([a-z0-9][a-z0-9\\-.]*[a-z0-9]+)|([a-z0-9]*))($|\\/))+$"
                minLength: 1
            not:
              allOf:
                - required:
                    - cmd
                - required:
                    - args
            properties:
              acceptedResourceRoles:
                items:
                  type: string
                type: array
                description: 'Optional. A list of resource roles. Marathon considers only resource offers with roles in this list for launching tasks of this app. If you do not specify this, Marathon considers all resource offers with roles that have been configured by the `--default_accepted_resource_roles` command line flag. If no `--default_accepted_resource_roles` was given on startup, Marathon considers all resource offers. To register Marathon for a role, you need to specify the `--mesos_role` command line flag on startup. If you want to assign all resources of a slave to a role, you can use the `--default_role` argument when starting up the slave. If you need a more fine-grained configuration, you can use the `--resources` argument to specify resource shares per role. The Mesos master needs to be started with `--roles` followed by a comma-separated list of all roles you want to use across your cluster. See [the Mesos command line documentation](http://mesos.apache.org/documentation/latest/configuration/) for details.'
              args:
                items:
                  type: string
                type: array
                description: An array of strings that represents an alternative mode of specifying the command to run. This was motivated by safe usage of containerizer features like a custom Docker ENTRYPOINT. This args field may be used in place of cmd even when using the default command executor. This change mirrors API and semantics changes in the Mesos CommandInfo protobuf message starting with version `0.20.0`.  Either `cmd` or `args` must be supplied. It is invalid to supply both `cmd` and `args` in the same app.
              backoffFactor:
                minimum: 1
                type: number
                description: Configures exponential backoff behavior when launching potentially sick apps. This prevents sandboxes associated with consecutively failing tasks from filling up the hard disk on Mesos slaves. The backoff period is multiplied by the factor for each consecutive failure until it reaches maxLaunchDelaySeconds. This applies also to tasks that are killed due to failing too many health checks.
              backoffSeconds:
                description: Configures exponential backoff behavior when launching potentially sick apps. This prevents sandboxes associated with consecutively failing tasks from filling up the hard disk on Mesos slaves. The backoff period is multiplied by the factor for each consecutive failure until it reaches maxLaunchDelaySeconds. This applies also to tasks that are killed due to failing too many health checks.
                minimum: 0
                type: integer
              cmd:
                description: 'The command that is executed.  This value is wrapped by Mesos via `/bin/sh -c ${app.cmd}`.  Either `cmd` or `args` must be supplied. It is invalid to supply both `cmd` and `args` in the same app.'
                type: string
                minLength: 1
              constraints:
                type: array
                items:
                  type: array
                  items:
                    - type: string
                    - type: string
                      enum:
                        - UNIQUE
                        - CLUSTER
                        - GROUP_BY
                        - LIKE
                        - UNLIKE
                    - type: string
                  minItems: 2
                  additionalItems: false
                description: 'Valid constraint operators are one of UNIQUE, CLUSTER, GROUP_BY, LIKE, UNLIKE.'
              container:
                additionalProperties: false
                properties:
                  docker:
                    additionalProperties: false
                    properties:
                      forcePullImage:
                        type: boolean
                        description: 'The container will be pulled, regardless if it is already available on the local system.'
                      image:
                        type: string
                        minLength: 1
                        description: The name of the docker image to use.
                      network:
                        type: string
                        description: 'The networking mode, this container should operate in. One of BRIDGED|HOST|NONE'
                        enum:
                          - BRIDGE
                          - HOST
                          - NONE
                      parameters:
                        type: array
                        description: 'Allowing arbitrary parameters to be passed to docker CLI. Note that anything passed to this field is not guaranteed to be supported moving forward, as we might move away from the docker CLI.'
                        items:
                          type: object
                          additionalProperties: false
                          properties:
                            key:
                              type: string
                              minLength: 1
                              description: Key of this parameter
                            value:
                              type: string
                              description: Value of this parameter
                          required:
                            - key
                            - value
                      portMappings:
                        type: array
                        items:
                          type: object
                          additionalProperties: false
                          properties:
                            containerPort:
                              type: integer
                              description: 'Refers to the port the application listens to inside of the container. It is optional and now defaults to 0, in which case Marathon assigns the container port the same value as the assigned hostPort. This is especially useful for apps that advertise the port they are listening on to the outside world for P2P communication. Without containerPort: 0 they would erroneously advertise their private container port which is usually not the same as the externally visible host port.'
                              maximum: 65535
                              minimum: 0
                            hostPort:
                              type: integer
                              description: 'Retains the traditional meaning in Marathon, which is a random port from the range included in the Mesos resource offer. The resulting host ports for each task are exposed via the task details in the REST API and the Marathon web UI. hostPort is optional and defaults to 0.'
                              maximum: 65535
                              minimum: 0
                            protocol:
                              type: string
                              description: parameter is optional and defaults to tcp.
                            servicePort:
                              type: integer
                              description: 'Is a helper port intended for doing service discovery using a well-known port per service. The assigned servicePort value is not used/interpreted by Marathon itself but supposed to used by load balancer infrastructure. See Service Discovery Load Balancing doc page. The servicePort parameter is optional and defaults to 0. Like hostPort, If the value is 0, a random port will be assigned. If a servicePort value is assigned by Marathon then Marathon guarantees that its value is unique across the cluster. The values for random service ports are in the range [local_port_min, local_port_max] where local_port_min and local_port_max are command line options with default values of 10000 and 20000, respectively.'
                              maximum: 65535
                              minimum: 0
                      privileged:
                        type: boolean
                        description: Run this docker image in privileged mode.
                    required:
                      - image
                    type: object
                  type:
                    type: string
                    description: Supported container types at the moment are DOCKER and MESOS.
                    enum:
                      - MESOS
                      - DOCKER
                  volumes:
                    items:
                      additionalProperties: false
                      properties:
                        containerPath:
                          type: string
                          description: The path of the volume in the container
                          minLength: 1
                        hostPath:
                          type: string
                          description: The path of the volume on the host
                          minLength: 1
                        persistent:
                          additionalProperties: false
                          properties:
                            size:
                              type: integer
                              description: The size of the persistent volume in MiB
                              minimum: 0
                          type: object
                        mode:
                          type: string
                          description: Possible values are RO for ReadOnly and RW for Read/Write
                          enum:
                            - RO
                            - RW
                      type: object
                    type: array
                type: object
              cpus:
                type: number
                description: 'The number of CPU shares this application needs per instance. This number does not have to be integer, but can be a fraction.'
                minimum: 0
              dependencies:
                type: array
                description: 'A list of services upon which this application depends. An order is derived from the dependencies for performing start/stop and upgrade of the application. For example, an application /a relies on the services /b which itself relies on /c. To start all 3 applications, first /c is started than /b than /a.'
                items:
                  $ref: '#/definitions/pathType'
              disk:
                type: number
                description: 'How much disk space is needed for this application. This number does not have to be an integer, but can be a fraction.'
                minimum: 0
              env:
                patternProperties:
                  '.*':
                    type: string
                type: object
              executor:
                type: string
                description: 'The executor to use to launch this application. Different executors are available. The simplest one (and the default if none is given) is //cmd, which takes the cmd and executes that on the shell level.'
                pattern: "^(|\\/\\/cmd|\\/?[^\\/]+(\\/[^\\/]+)*)$"
              fetch:
                type: array
                description: Provided URIs are passed to Mesos fetcher module and resolved in runtime.
                items:
                  type: object
                  additionalProperties: false
                  properties:
                    uri:
                      type: string
                      description: URI to be fetched by Mesos fetcher module
                    executable:
                      type: boolean
                      description: Set fetched artifact as executable
                    extract:
                      type: boolean
                      description: Extract fetched artifact if supported by Mesos fetcher module
                    cache:
                      type: boolean
                      description: Cache fetched artifact if supported by Mesos fetcher module
                  required:
                    - uri
              healthChecks:
                items:
                  type: object
                  additionalProperties: false
                  properties:
                    command:
                      type: object
                      items:
                        additionalProperties: false
                        properties:
                          value:
                            type: string
                            description: The health check command to execute.
                    gracePeriodSeconds:
                      type: integer
                      description: Health check failures are ignored within this number of seconds of the task being started or until the task becomes healthy for the first time.
                      minimum: 0
                    ignoreHttp1xx:
                      type: boolean
                      description: Ignore HTTP 1xx responses.
                    intervalSeconds:
                      type: integer
                      description: Number of seconds to wait between health checks.
                      minimum: 0
                    maxConsecutiveFailures:
                      type: integer
                      description: Number of consecutive health check failures after which the unhealthy task should be killed.
                      minimum: 0
                    path:
                      type: string
                      description: 'Path to endpoint exposed by the task that will provide health status. Example: /path/to/health. Note: only used if protocol == HTTP[S].'
                    port:
                      type: integer
                      description: 'The specific port to connect to. In case of dynamic ports, see portIndex.'
                      maximum: 65535
                      minimum: 0
                    portIndex:
                      type: integer
                      description: "Index in this app's ports array to be used for health requests. An index is used so the app can use random ports, like [0, 0, 0] for example, and tasks could be started with port environment variables like $PORT1."
                      minimum: 0
                    protocol:
                      type: string
                      description: 'Protocol of the requests to be performed. One of HTTP, HTTPS, TCP or COMMAND.'
                      enum:
                        - HTTP
                        - HTTPS
                        - TCP
                        - COMMAND
                    timeoutSeconds:
                      type: integer
                      description: Number of seconds after which a health check is considered a failure regardless of the response.
                      minimum: 0
                type: array
              id:
                $ref: '#/definitions/pathType'
                description: 'Unique identifier for the app consisting of a series of names separated by slashes. Each name must be at least 1 character and may only contain digits (`0-9`), dashes (`-`), dots (`.`), and lowercase letters (`a-z`). The name may not begin or end with a dash.'
              instances:
                type: integer
                description: 'The number of instances of this application to start. Please note: this number can be changed any time as needed to scale the application.'
                minimum: 0
              labels:
                type: object
                description: 'Attaching metadata to apps can be useful to expose additional information to other services, so we added the ability to place labels on apps (for example, you could label apps staging and production to mark services by their position in the pipeline).'
                additionalProperties:
                  type: string
              maxLaunchDelaySeconds:
                type: integer
                description: Configures exponential backoff behavior when launching potentially sick apps. This prevents sandboxes associated with consecutively failing tasks from filling up the hard disk on Mesos slaves. The backoff period is multiplied by the factor for each consecutive failure until it reaches maxLaunchDelaySeconds. This applies also to tasks that are killed due to failing too many health checks.
                minimum: 0
              mem:
                type: number
                description: The amount of memory in MB that is needed for the application per instance.
                minimum: 0
              ipAddress:
                type: object
                description: "If an application definition includes the 'ipAddress' field, then Marathon will request a per-task IP from Mesos. A separate ports/portMappings configuration is then disallowed."
                properties:
                  discovery:
                    type: object
                    description: Information useful for service discovery.
                    properties:
                      ports:
                        type: array
                        description: Array of objects describing the ports exposed by each task.
                        items:
                          type: object
                          description: Port
                          properties:
                            number:
                              maximum: 65535
                              minimum: 0
                              type: integer
                              description: The port number.
                            name:
                              type: string
                              description: Name of the port.
                              pattern: '^[a-z][a-z0-9-]*$'
                            protocol:
                              enum:
                                - tcp
                                - udp
                              description: "Protocol of the port (one of ['tcp', 'udp'])."
                  groups:
                    type: array
                    description: Array of network groups. One IP address can belong to zero or more network groups. The idea is that containers can only reach containers with which they share at least one network group.
                    items:
                      type: string
                      description: The name of the network group.
                  labels:
                    type: object
                    description: Key value pair for meta data on that network interface.
                    properties: {}
                    additionalProperties: true
              ports:
                type: array
                description: 'An array of required port resources on the agent host. The number of items in the array determines how many dynamic ports are allocated for every task. For every port that is zero, a globally unique (cluster-wide) port is assigned and provided as part of the app definition to be used in load balancing definitions.'
                items:
                  maximum: 65535
                  minimum: 0
                  type: integer
              residency:
                type: object
                description: 'When using local persistent volumes that pin tasks onto agents, these values define how Marathon handles terminal states of these tasks.'
                properties:
                  relaunchEscalationTimeoutSeconds:
                    type: integer
                    description: "When a task using persistent local volumes cannot be restarted on the agent it's been pinned to, Marathon will try to launch this task on another node after this timeout. Defaults to 3600 (one hour)."
                    minimum: 0
                    additionalProperties: false
                  taskLostBehavior:
                    type: string
                    description: 'When Marathon receives a TASK_LOST status update indicating that the agent running the task is gone, this property defines whether Marathon will launch the task on another node or not. Defaults to WAIT_FOREVER'
                    enum:
                      - WAIT_FOREVER
                      - RELAUNCH_AFTER_TIMEOUT
                    additionalProperties: false
                additionalProperties: false
              requirePorts:
                type: boolean
                description: 'Normally, the host ports of your tasks are automatically assigned. This corresponds to the requirePorts value false which is the default. If you need more control and want to specify your host ports in advance, you can set requirePorts to true. This way the ports you have specified are used as host ports. That also means that Marathon can schedule the associated tasks only on hosts that have the specified ports available.'
              storeUrls:
                type: array
                description: "URL's that have to be resolved and put into the artifact store, before the task will be started."
                items:
                  type: string
                  minLength: 1
              upgradeStrategy:
                type: object
                description: During an upgrade all instances of an application get replaced by a new version. The upgradeStrategy controls how Marathon stops old versions and launches new versions.
                additionalProperties: false
                properties:
                  maximumOverCapacity:
                    type: number
                    description: A number between 0 and 1 which is multiplied with the instance count. This is the maximum number of additional instances launched at any point of time during the upgrade process.
                    maximum: 1
                    minimum: 0
                  minimumHealthCapacity:
                    type: number
                    description: 'A number between 0 and 1 that is multiplied with the instance count. This is the minimum number of healthy nodes that do not sacrifice overall application purpose. Marathon will make sure, during the upgrade process, that at any point of time this number of healthy instances are up.'
                    maximum: 1
                    minimum: 0
              uris:
                type: array
                description: 'URIs defined here are resolved, before the application gets started. If the application has external dependencies, they should be defined here.'
                items:
                  type: string
                  minLength: 1
              user:
                type: string
                description: The user to use to run the tasks on the agent.
              version:
                type: string
                description: The version of this definition.
                format: date-time
              versionInfo:
                type: object
                description: Detailed version information.
                additionalProperties: false
                properties:
                  lastScalingAt:
                    type: string
                    description: Contains the time stamp of the last change to this app which was not simply a scaling or a restarting configuration.
                    format: date-time
                  lastConfigChangeAt:
                    type: string
                    description: 'Contains the time stamp of the last change including changes like scaling or restarting the app. Since our versions are time based, this is currently equal to version.'
                    format: date-time
            required:
              - id
            type: object
      responses:
        '200':
          description: 'A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, than this means it is finished. As long as the deployment runs, the effect of that change operation is visible only partially.'
          examples:
            application/json:
              deploymentId: 5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43
              version: '2015-09-29T15:59:51.164Z'
        '400':
          description: The application definition provided in the body is not valid.
          examples:
            application/json:
              message: Invalid JSON
              details:
                - path: /id
                  errors:
                    - error.expected.jsstring
        '401':
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          examples:
            application/json:
              message: Invalid username or password.
        '403':
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          examples:
            application/json:
              message: 'Not Authorized to perform this action!'
        '404':
          description: No task found with this `app_id`.
          examples:
            application/json:
              message: "App '/not_existent' does not exist"
        '409':
          description: 'There is an already running deployment, that affects this application. To override this deployment, use the force=true flag'
          examples:
            application/json:
              message: "App is locked by one or more deployments. Override with the option '?force=true'. View details at '/v2/deployments/<DEPLOYMENT_ID>'."
              deployments:
                - id: 97c136bf-5a28-4821-9d94-480d9fbb01c8
        '422':
          description: 'The entity send can not be preocessed, since there are validation errors'
          examples:
            application/json:
              message: Object is not valid
              details:
                - attribute: upgradeStrategy.minimumHealthCapacity
                  error: is greater than 1
      summary: ''
    delete:
      description: |-
        Destroy an application. All data about that application will be deleted.
        Note&#58;  This operation will create a deployment. The operation finishes, if the deployment succeeds. You can query the deployments endoint to see the status of the deployment.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: force
          in: query
          description: |-
            Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.
            Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
          required: false
          type: boolean
      responses:
        '200':
          description: 'A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, than this means it is finished. As long as the deployment runs, the effect of that change operation is visible only partially.'
          examples:
            application/json:
              deploymentId: 5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43
              version: '2015-09-29T15:59:51.164Z'
        '401':
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          examples:
            application/json:
              message: Invalid username or password.
        '403':
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          examples:
            application/json:
              message: 'Not Authorized to perform this action!'
        '404':
          description: No app with this id known.
          examples:
            application/json:
              message: "App '/not-existing' does not exist"
        '409':
          description: 'There is an already running deployment, that affects this application. To override this deployment, use the force=true flag'
          examples:
            application/json:
              message: "App is locked by one or more deployments. Override with the option '?force=true'. View details at '/v2/deployments/<DEPLOYMENT_ID>'."
              deployments:
                - id: 97c136bf-5a28-4821-9d94-480d9fbb01c8
      summary: ''
  '/v2/apps/{app_id}/restart':
    parameters:
      - name: app_id
        in: path
        description: app_id
        required: true
        type: string
    post:
      description: Restart all tasks of this application.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: force
          in: query
          description: |-
            Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.
            Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
          required: false
          type: boolean
      responses:
        '200':
          description: 'A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, than this means it is finished. As long as the deployment runs, the effect of that change operation is visible only partially.'
          examples:
            application/json:
              deploymentId: 5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43
              version: '2015-09-29T15:59:51.164Z'
        '401':
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          examples:
            application/json:
              message: Invalid username or password.
        '403':
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          examples:
            application/json:
              message: 'Not Authorized to perform this action!'
        '404':
          description: No task found with this `app_id`.
          examples:
            application/json:
              message: "App '/not_existent' does not exist"
        '409':
          description: 'There is an already running deployment, that affects this application. To override this deployment, use the force=true flag'
          examples:
            application/json:
              message: "App is locked by one or more deployments. Override with the option '?force=true'. View details at '/v2/deployments/<DEPLOYMENT_ID>'."
              deployments:
                - id: 97c136bf-5a28-4821-9d94-480d9fbb01c8
      summary: ''
  '/v2/apps/{app_id}/tasks':
    parameters:
      - name: app_id
        in: path
        description: app_id
        required: true
        type: string
    get:
      description: List all running tasks for application `app_id`.
      consumes:
        - application/json
      produces:
        - text/plain
        - application/json
      parameters: []
      responses:
        '200':
          description: The list of running tasks for application `app_id`.
          examples:
            text/plain: "minecraft_survival-world\t10013\tsrv7.hw.ca1.mesosphere.com:31756\n"
        '401':
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          examples:
            application/json:
              message: Invalid username or password.
        '403':
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          examples:
            application/json:
              message: 'Not Authorized to perform this action!'
        '404':
          description: No task found with this `app_id`.
          examples:
            application/json:
              message: "App '/not_existent' does not exist"
      summary: ''
    delete:
      description: Kill tasks that belong to the application `app_id`
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: force
          in: query
          description: |-
            Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.
            Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
          required: false
          type: boolean
        - name: host
          in: query
          description: all tasks of that application on the supplied slave are killed
          required: false
          type: string
        - name: scale
          in: query
          description: 'If `scale=true` is specified, then the application is scaled down by the number of killed tasks.'
          required: false
          type: boolean
      responses:
        '200':
          description: 'If scale=false, all tasks that were killed are returned. If scale=true, than a deployment is triggered and the deployment is returned.'
          examples:
            application/json:
              tasks:
                - appId: /minecraft/survival-world
                  host: srv7.hw.ca1.mesosphere.com
                  id: minecraft_survival-world.564bd685-4c30-11e5-98c1-be5b2935a987
                  ports:
                    - 31756
                  slaveId: null
                  stagedAt: '2015-08-26T20:23:39.463Z'
                  startedAt: '2015-08-26T20:23:44.678Z'
                  version: '2015-04-17T04:00:14.171Z'
        '401':
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          examples:
            application/json:
              message: Invalid username or password.
        '403':
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          examples:
            application/json:
              message: 'Not Authorized to perform this action!'
        '404':
          description: No task found with this `app_id`.
          examples:
            application/json:
              message: "App '/not_existent' does not exist"
        '409':
          description: 'There is an already running deployment, that affects this application. To override this deployment, use the force=true flag'
          examples:
            application/json:
              message: "App is locked by one or more deployments. Override with the option '?force=true'. View details at '/v2/deployments/<DEPLOYMENT_ID>'."
              deployments:
                - id: 97c136bf-5a28-4821-9d94-480d9fbb01c8
      summary: ''
  '/v2/apps/{app_id}/tasks/{task_id}':
    parameters:
      - name: app_id
        in: path
        description: app_id
        required: true
        type: string
      - name: task_id
        in: path
        description: task_id
        required: true
        type: string
    delete:
      description: Kill the task with ID `task_id` that belongs to the application `app_id`.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: force
          in: query
          description: |-
            Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.
            Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
          required: false
          type: boolean
        - name: scale
          in: query
          description: 'If `scale=true` is specified, then the application is scaled down by the number of killed tasks.'
          required: false
          type: boolean
      responses:
        '200':
          description: 'If scale=false, the task that was killed is returned. If scale=true, than a deployment is triggered and the deployment is returned.'
          examples:
            application/json:
              task:
                - appId: /minecraft/survival-world
                  host: srv7.hw.ca1.mesosphere.com
                  id: minecraft_survival-world.564bd685-4c30-11e5-98c1-be5b2935a987
                  ports:
                    - 31756
                  slaveId: null
                  stagedAt: '2015-08-26T20:23:39.463Z'
                  startedAt: '2015-08-26T20:23:44.678Z'
                  version: '2015-04-17T04:00:14.171Z'
        '401':
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          examples:
            application/json:
              message: Invalid username or password.
        '403':
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          examples:
            application/json:
              message: 'Not Authorized to perform this action!'
        '404':
          description: No task found with this task_id.
          examples:
            application/json:
              message: "Task 'not-existing' does not exist"
        '409':
          description: 'There is an already running deployment, that affects this application. To override this deployment, use the force=true flag'
          examples:
            application/json:
              message: "App is locked by one or more deployments. Override with the option '?force=true'. View details at '/v2/deployments/<DEPLOYMENT_ID>'."
              deployments:
                - id: 97c136bf-5a28-4821-9d94-480d9fbb01c8
      summary: ''
  '/v2/apps/{app_id}/versions':
    parameters:
      - name: app_id
        in: path
        description: app_id
        required: true
        type: string
      - name: task_id
        in: path
        description: task_id
        required: true
        type: string
    get:
      description: List the versions of the application with id `app_id`
      consumes:
        - application/json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: The list of versions of the application
          examples:
            application/json:
              versions:
                - '2014-03-01T23:42:20.938Z'
        '401':
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          examples:
            application/json:
              message: Invalid username or password.
        '403':
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          examples:
            application/json:
              message: 'Not Authorized to perform this action!'
        '404':
          description: No task found with this `app_id`.
          examples:
            application/json:
              message: "App '/not_existent' does not exist"
      summary: ''
  '/v2/apps/{app_id}/versions/{version}':
    parameters:
      - name: app_id
        in: path
        description: app_id
        required: true
        type: string
      - name: task_id
        in: path
        description: task_id
        required: true
        type: string
      - name: version
        in: path
        description: version
        required: true
        type: string
    get:
      description: List the configuration of the application with id `app_id` at version `version`.
      consumes:
        - application/json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: The application definition at that point in time.
          examples:
            application/json:
              id: /foo
              instances: 2
              cmd: sleep 1000
              cpus: 0.1
              disk: 0
              mem: 16
              acceptedResourceRoles:
                - mesos_role
              args:
                - sleep
                - '100'
              backoffFactor: 1.15
              backoffSeconds: 1
              constraints:
                - - hostname
                  - LIKE
                  - 'srv2.*'
              container:
                docker:
                  forcePullImage: false
                  image: 'mesosphere:marathon/latest'
                  network: BRIDGE
                  parameters:
                    - key: name
                      value: kdc
                  portMappings:
                    - containerPort: 80
                      hostPort: 0
                      protocol: tcp
                      servicePort: 10019
                  privileged: false
                type: DOCKER
                volumes:
                  - containerPath: /docker_storage
                    hostPath: /hdd/tools/docker/registry
                    mode: RW
              dependencies:
                - /prod/group
              env:
                XPS1: Test
                XPS2: Rest
              executor: ''
              healthChecks:
                - gracePeriodSeconds: 300
                  ignoreHttp1xx: false
                  intervalSeconds: 20
                  maxConsecutiveFailures: 3
                  path: /
                  portIndex: 0
                  protocol: HTTP
                  timeoutSeconds: 20
              labels:
                owner: zeus
                note: Away from olympus
              maxLaunchDelaySeconds: 3600
              ipAddress:
                discovery:
                  ports:
                    - number: 8080
                      name: rest_endpoint
                      protocol: tcp
                groups:
                  - dev
                labels:
                  environment: dev
              ports:
                - 0
              requirePorts: false
              upgradeStrategy:
                maximumOverCapacity: 1
                minimumHealthCapacity: 1
              fetch:
                - uri: 'https://foo.com/setup.py'
                - uri: 'https://foo.com/archive.zip'
                  executable: false
                  extract: true
                  cache: true
              user: root
        '401':
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          examples:
            application/json:
              message: Invalid username or password.
        '403':
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          examples:
            application/json:
              message: 'Not Authorized to perform this action!'
        '404':
          description: No task found with this `app_id`.
          examples:
            application/json:
              message: "App '/not_existent' does not exist"
      summary: ''
  /v2/deployments:
    parameters: []
    get:
      description: |-
        List all running deployments. A deployment is a change in the service setup.
        A deployment is identified by an id, affects a set of applications and is composed of deployment steps.
        Every step contains a list of actions with following types
        * <code>StartApplication</code> starts an application, which is currently not running.
        * <code>StopApplication</code> stops an already running application.
        * <code>ScaleApplication</code> changes the number of instances of an application and allows to kill specified instances while scaling.
        * <code>RestartApplication</code> upgrades an already deployed application with a new version.
        * <code>ResolveArtifacts</code> Resolve all artifacts of an application
      consumes:
        - application/json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: The list of all running deployments.
          examples:
            application/json:
              - id: 97c136bf-5a28-4821-9d94-480d9fbb01c8
                version: '2015-09-30T09:09:17.614Z'
                affectedApps:
                  - /foo
                steps:
                  - - action: StartApplication
                      app: /foo
                  - - action: ScaleApplication
                      app: /foo
                currentActions:
                  - action: ScaleApplication
                    app: /foo
                currentStep: 2
                totalSteps: 2
        '401':
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          examples:
            application/json:
              message: Invalid username or password.
        '403':
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          examples:
            application/json:
              message: 'Not Authorized to perform this action!'
      summary: ''
  '/v2/deployments/{deployment_id}':
    parameters:
      - name: deployment_id
        in: path
        description: deployment_id
        required: true
        type: string
    delete:
      description: Revert the deployment with `deployment_id` by creating a new deployment which reverses all changes.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: force
          in: query
          description: 'If set to <code>false</code> (the default) then the deployment is canceled and a new deployment is created to revert the changes of this deployment. Without concurrent deployments, this restores the configuration before this deployment. If set to <code>true</code>, then the deployment is still canceled but no rollback deployment is created.'
          required: false
          type: boolean
      responses:
        '200':
          description: 'A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, than this means it is finished. As long as the deployment runs, the effect of that change operation is visible only partially.'
          examples:
            application/json:
              deploymentId: 5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43
              version: '2015-09-29T15:59:51.164Z'
        '401':
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          examples:
            application/json:
              message: Invalid username or password.
        '403':
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          examples:
            application/json:
              message: 'Not Authorized to perform this action!'
        '404':
          description: The deployment plan with the given id can not be found.
          examples:
            application/json:
              message: DeploymentPlan unknown_deployment does not exist
      summary: ''
  /v2/groups:
    parameters: []
    get:
      description: Get the group with all applications and all transitive child groups.
      consumes:
        - application/json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: The group with all transitive dependencies.
          schema:
            $schema: 'http://json-schema.org/schema#'
            id: 'https://raw.githubusercontent.com/mesosphere/marathon/master/docs/docs/rest-api/public/api/v2/schema/Group.json'
            additionalProperties: false
            definitions:
              pathType:
                type: string
                pattern: "^(\\/?((\\.{2})|([a-z0-9][a-z0-9\\-.]*[a-z0-9]+)|([a-z0-9]*))($|\\/))+$"
                minLength: 1
            type: object
            properties:
              id:
                type: string
                $ref: '#/definitions/pathType'
                description: 'Unique identifier for the app consisting of a series of names separated by slashes. Each name must be at least 1 character and may only contain digits (`0-9`), dashes (`-`), dots (`.`), and lowercase letters (`a-z`). The name may not begin or end with a dash.'
              apps:
                type: array
                description: The list of AppDefinitions in this group. See AppDefinition.json for the schema.
                items:
                  $ref: ./AppDefinition.json
              groups:
                type: array
                description: Groups can build a tree. Each group can contain sub-groups. The sub-groups are defined here.
                items:
                  $ref: '#'
              dependencies:
                type: array
                description: 'A list of services upon which this application depends. An order is derived from the dependencies for performing start/stop and upgrade of the application. For example, an application /a relies on the services /b which itself relies on /c. To start all 3 applications, first /c is started than /b than /a.'
                items:
                  $ref: '#/definitions/pathType'
              version:
                type: string
                description: The version of this definition.
                format: date-time
            required:
              - id
          examples:
            application/json:
              id: /
              apps: []
              groups:
                - id: /tools
                  apps:
                    - id: /tools/oauth-server
                      instances: 2
                      cpus: 1
                      mem: 1024
                      disk: 0
                      constraints:
                        - - hostname
                          - UNIQUE
                      uris: []
                      storeUrls: []
                      ports:
                        - 1980
                      requirePorts: false
                      backoffSeconds: 1
                      backoffFactor: 1.15
                      maxLaunchDelaySeconds: 3600
                      container:
                        type: DOCKER
                        volumes: []
                        docker:
                          image: 'docker-registry/oauth_server:6d7d463cb8b1517002080a81cf23f9cf7b7fc774'
                          network: HOST
                          privileged: false
                          parameters: []
                          forcePullImage: false
                      healthChecks:
                        - path: /
                          protocol: HTTP
                          portIndex: 0
                          gracePeriodSeconds: 300
                          intervalSeconds: 20
                          timeoutSeconds: 20
                          maxConsecutiveFailures: 3
                          ignoreHttp1xx: false
                      dependencies: []
                      upgradeStrategy:
                        minimumHealthCapacity: 0.5
                        maximumOverCapacity: 0
                      version: '2015-09-28T19:47:37.681Z'
                      versionInfo:
                        lastScalingAt: '2015-09-28T19:47:37.681Z'
                        lastConfigChangeAt: '2015-09-28T19:47:37.681Z'
                    - id: /tools/datadog-agent
                      instances: 5
                      cpus: 1
                      mem: 512
                      disk: 0
                      executor: ''
                      constraints:
                        - - hostname
                          - UNIQUE
                      uris: []
                      storeUrls: []
                      ports:
                        - 10018
                      requirePorts: false
                      backoffSeconds: 1
                      backoffFactor: 1.15
                      maxLaunchDelaySeconds: 3600
                      container:
                        type: DOCKER
                        volumes:
                          - containerPath: /var/run/docker.sock
                            hostPath: /var/run/docker.sock
                            mode: RW
                          - containerPath: /host/proc/mounts
                            hostPath: /proc/mounts
                            mode: RO
                          - containerPath: /host/sys/fs/cgroup
                            hostPath: /sys/fs/cgroup/
                            mode: RO
                        docker:
                          image: 'datadog/docker-dd-agent:latest'
                          network: HOST
                          privileged: true
                          parameters: []
                          forcePullImage: false
                      healthChecks: []
                      dependencies: []
                      upgradeStrategy:
                        minimumHealthCapacity: 0.5
                        maximumOverCapacity: 0
                      version: '2015-08-26T22:33:24.225Z'
                      versionInfo:
                        lastScalingAt: '2015-08-26T22:33:24.225Z'
                        lastConfigChangeAt: '2015-05-19T13:59:18.899Z'
                  groups:
                    - id: /tools/log
                      apps: []
                      groups: []
                      dependencies: []
                      version: '2015-09-17T10:38:20.875Z'
                    - id: /tools/docker
                      apps:
                        - id: /tools/docker/registry
                          instances: 1
                          cpus: 0.5
                          mem: 4096
                          disk: 0
                          executor: ''
                          constraints: []
                          uris: []
                          storeUrls: []
                          ports:
                            - 5000
                          requirePorts: false
                          backoffSeconds: 1
                          backoffFactor: 1.15
                          maxLaunchDelaySeconds: 3600
                          container:
                            type: DOCKER
                            volumes:
                              - containerPath: /docker_storage
                                hostPath: /hdd/tools/docker/registry
                                mode: RW
                            docker:
                              image: registry
                              network: BRIDGE
                              portMappings:
                                - containerPort: 5000
                                  hostPort: 0
                                  servicePort: 5000
                                  protocol: tcp
                              privileged: false
                              parameters: []
                              forcePullImage: false
                          healthChecks: []
                          dependencies: []
                          upgradeStrategy:
                            minimumHealthCapacity: 1
                            maximumOverCapacity: 1
                          version: '2015-08-19T21:26:47.616Z'
                          versionInfo:
                            lastScalingAt: '2015-08-19T21:26:47.616Z'
                            lastConfigChangeAt: '2015-08-19T21:00:54.621Z'
                      groups: []
                      dependencies: []
                      version: '2015-09-17T10:38:20.875Z'
                  dependencies: []
                  version: '2015-09-17T10:38:20.875Z'
              dependencies: []
              version: '2015-09-17T10:38:20.875Z'
        '401':
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          examples:
            application/json:
              message: Invalid username or password.
        '403':
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          examples:
            application/json:
              message: 'Not Authorized to perform this action!'
      summary: ''
    put:
      description: |-
        Change parameters of a deployed application group. The new group parameters get applied.

        * Changes to application parameters will result in a restart of this application.
        * A new application added to the group will be started.
        * An existing application removed from the group will be stopped.

        If there are no changes to the application definition, no restart is triggered. During restart marathon keeps track, that the configured amount of minimal running instances are _always_ available.
        This method allows 2 special modes for the update operation>

        * Provide only the `version` field in the group definition. This will rollback the group to that given version
        * Provide only the `scaleBy` field will scale all transitive applications instance counts by the given factor.

        When one of version or scaleBy are set, nothing else than a version change or transitive instance count scaling will be applied. If both version and scaleBy are set, only a version rollback will be performed – the scaleBy value will not be applied.
        A deployment can run forever. This is the case, when the new application has a problem and does not become healthy. In this case, human interaction is needed with 2 possible choices

        * Rollback to an existing older version
        * Update with a newer version of the group which does not have the problems of the old one.

        Since the deployment of the group can take a considerable amount of time, this endpoint returns immediately with a version. The failure or success of the action is signalled via event. There is a group_change_success and group_change_failed with the given version.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: force
          in: query
          description: |-
            Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.
            Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
          required: false
          type: boolean
        - name: body
          in: body
          schema:
            $schema: 'http://json-schema.org/schema#'
            id: 'https://raw.githubusercontent.com/mesosphere/marathon/master/docs/docs/rest-api/public/api/v2/schema/Group.json'
            additionalProperties: false
            definitions:
              pathType:
                type: string
                pattern: "^(\\/?((\\.{2})|([a-z0-9][a-z0-9\\-.]*[a-z0-9]+)|([a-z0-9]*))($|\\/))+$"
                minLength: 1
            type: object
            properties:
              id:
                type: string
                $ref: '#/definitions/pathType'
                description: 'Unique identifier for the app consisting of a series of names separated by slashes. Each name must be at least 1 character and may only contain digits (`0-9`), dashes (`-`), dots (`.`), and lowercase letters (`a-z`). The name may not begin or end with a dash.'
              apps:
                type: array
                description: The list of AppDefinitions in this group. See AppDefinition.json for the schema.
                items:
                  $ref: ./AppDefinition.json
              groups:
                type: array
                description: Groups can build a tree. Each group can contain sub-groups. The sub-groups are defined here.
                items:
                  $ref: '#'
              dependencies:
                type: array
                description: 'A list of services upon which this application depends. An order is derived from the dependencies for performing start/stop and upgrade of the application. For example, an application /a relies on the services /b which itself relies on /c. To start all 3 applications, first /c is started than /b than /a.'
                items:
                  $ref: '#/definitions/pathType'
              version:
                type: string
                description: The version of this definition.
                format: date-time
            required:
              - id
      responses:
        '200':
          description: 'A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, than this means it is finished. As long as the deployment runs, the effect of that change operation is visible only partially.'
          examples:
            application/json:
              deploymentId: 5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43
              version: '2015-09-29T15:59:51.164Z'
        '400':
          description: The group definition provided in the body is not valid.
          examples:
            application/json:
              message: Invalid JSON
              details:
                - path: /id
                  errors:
                    - error.expected.jsstring
        '401':
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          examples:
            application/json:
              message: Invalid username or password.
        '403':
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          examples:
            application/json:
              message: 'Not Authorized to perform this action!'
        '409':
          description: 'There is an already running deployment, that affects this application. To override this deployment, use the force=true flag'
          examples:
            application/json:
              message: "App is locked by one or more deployments. Override with the option '?force=true'. View details at '/v2/deployments/<DEPLOYMENT_ID>'."
              deployments:
                - id: 97c136bf-5a28-4821-9d94-480d9fbb01c8
        '422':
          description: 'The entity send can not be preocessed, since there are validation errors'
          examples:
            application/json:
              message: Object is not valid
              details:
                - attribute: 'apps[0].id'
                  error: 'identifier /app is not child of /group. Hint: use relative paths.'
      summary: ''
    post:
      description: Create and start a new application group. Application groups can contain other application groups.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: force
          in: query
          description: |-
            Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.
            Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
          required: false
          type: boolean
        - name: body
          in: body
          schema:
            $schema: 'http://json-schema.org/schema#'
            id: 'https://raw.githubusercontent.com/mesosphere/marathon/master/docs/docs/rest-api/public/api/v2/schema/Group.json'
            additionalProperties: false
            definitions:
              pathType:
                type: string
                pattern: "^(\\/?((\\.{2})|([a-z0-9][a-z0-9\\-.]*[a-z0-9]+)|([a-z0-9]*))($|\\/))+$"
                minLength: 1
            type: object
            properties:
              id:
                type: string
                $ref: '#/definitions/pathType'
                description: 'Unique identifier for the app consisting of a series of names separated by slashes. Each name must be at least 1 character and may only contain digits (`0-9`), dashes (`-`), dots (`.`), and lowercase letters (`a-z`). The name may not begin or end with a dash.'
              apps:
                type: array
                description: The list of AppDefinitions in this group. See AppDefinition.json for the schema.
                items:
                  $ref: ./AppDefinition.json
              groups:
                type: array
                description: Groups can build a tree. Each group can contain sub-groups. The sub-groups are defined here.
                items:
                  $ref: '#'
              dependencies:
                type: array
                description: 'A list of services upon which this application depends. An order is derived from the dependencies for performing start/stop and upgrade of the application. For example, an application /a relies on the services /b which itself relies on /c. To start all 3 applications, first /c is started than /b than /a.'
                items:
                  $ref: '#/definitions/pathType'
              version:
                type: string
                description: The version of this definition.
                format: date-time
            required:
              - id
      responses:
        '200':
          description: 'A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, than this means it is finished. As long as the deployment runs, the effect of that change operation is visible only partially.'
          examples:
            application/json:
              deploymentId: 5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43
              version: '2015-09-29T15:59:51.164Z'
        '400':
          description: The group definition provided in the body is not valid.
          examples:
            application/json:
              message: Invalid JSON
              details:
                - path: /id
                  errors:
                    - error.expected.jsstring
        '401':
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          examples:
            application/json:
              message: Invalid username or password.
        '403':
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          examples:
            application/json:
              message: 'Not Authorized to perform this action!'
        '409':
          description: There is an already deployed group with this name
          examples:
            application/json:
              message: Group / is already created. Use PUT to change this group.
        '422':
          description: 'The entity send can not be preocessed, since there are validation errors'
          examples:
            application/json:
              message: Object is not valid
              details:
                - attribute: 'apps[0].id'
                  error: 'identifier /app is not child of /group. Hint: use relative paths.'
      summary: ''
    delete:
      description: Destroy a group. All data about that group and all associated applications will be deleted. The failure or success of the action is signalled via events. There is a group_change_success and group_change_failed with the given version.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: force
          in: query
          description: |-
            Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.
            Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
          required: false
          type: boolean
      responses:
        '200':
          description: 'A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, than this means it is finished. As long as the deployment runs, the effect of that change operation is visible only partially.'
          examples:
            application/json:
              deploymentId: 5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43
              version: '2015-09-29T15:59:51.164Z'
        '401':
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          examples:
            application/json:
              message: Invalid username or password.
        '403':
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          examples:
            application/json:
              message: 'Not Authorized to perform this action!'
        '409':
          description: 'There is an already running deployment, that affects this application. To override this deployment, use the force=true flag'
          examples:
            application/json:
              message: "App is locked by one or more deployments. Override with the option '?force=true'. View details at '/v2/deployments/<DEPLOYMENT_ID>'."
              deployments:
                - id: 97c136bf-5a28-4821-9d94-480d9fbb01c8
      summary: ''
  /v2/groups/versions:
    parameters: []
    get:
      description: List all versions the group with the specified path.
      consumes:
        - application/json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: List all available versions of that group.
          examples:
            application/json:
              - '2015-09-25T15:13:48.343Z'
              - '2015-09-11T11:11:22.692Z'
              - '2015-09-11T10:47:21.241Z'
        '401':
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          examples:
            application/json:
              message: Invalid username or password.
        '403':
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          examples:
            application/json:
              message: 'Not Authorized to perform this action!'
      summary: ''
  '/v2/groups/{group_id}':
    parameters:
      - name: group_id
        in: path
        description: group_id
        required: true
        type: string
    get:
      description: Get the group with all applications and all transitive child groups.
      consumes:
        - application/json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: The group with all transitive dependencies.
          schema:
            $schema: 'http://json-schema.org/schema#'
            id: 'https://raw.githubusercontent.com/mesosphere/marathon/master/docs/docs/rest-api/public/api/v2/schema/Group.json'
            additionalProperties: false
            definitions:
              pathType:
                type: string
                pattern: "^(\\/?((\\.{2})|([a-z0-9][a-z0-9\\-.]*[a-z0-9]+)|([a-z0-9]*))($|\\/))+$"
                minLength: 1
            type: object
            properties:
              id:
                type: string
                $ref: '#/definitions/pathType'
                description: 'Unique identifier for the app consisting of a series of names separated by slashes. Each name must be at least 1 character and may only contain digits (`0-9`), dashes (`-`), dots (`.`), and lowercase letters (`a-z`). The name may not begin or end with a dash.'
              apps:
                type: array
                description: The list of AppDefinitions in this group. See AppDefinition.json for the schema.
                items:
                  $ref: ./AppDefinition.json
              groups:
                type: array
                description: Groups can build a tree. Each group can contain sub-groups. The sub-groups are defined here.
                items:
                  $ref: '#'
              dependencies:
                type: array
                description: 'A list of services upon which this application depends. An order is derived from the dependencies for performing start/stop and upgrade of the application. For example, an application /a relies on the services /b which itself relies on /c. To start all 3 applications, first /c is started than /b than /a.'
                items:
                  $ref: '#/definitions/pathType'
              version:
                type: string
                description: The version of this definition.
                format: date-time
            required:
              - id
          examples:
            application/json:
              id: /
              apps: []
              groups:
                - id: /tools
                  apps:
                    - id: /tools/oauth-server
                      instances: 2
                      cpus: 1
                      mem: 1024
                      disk: 0
                      constraints:
                        - - hostname
                          - UNIQUE
                      uris: []
                      storeUrls: []
                      ports:
                        - 1980
                      requirePorts: false
                      backoffSeconds: 1
                      backoffFactor: 1.15
                      maxLaunchDelaySeconds: 3600
                      container:
                        type: DOCKER
                        volumes: []
                        docker:
                          image: 'docker-registry/oauth_server:6d7d463cb8b1517002080a81cf23f9cf7b7fc774'
                          network: HOST
                          privileged: false
                          parameters: []
                          forcePullImage: false
                      healthChecks:
                        - path: /
                          protocol: HTTP
                          portIndex: 0
                          gracePeriodSeconds: 300
                          intervalSeconds: 20
                          timeoutSeconds: 20
                          maxConsecutiveFailures: 3
                          ignoreHttp1xx: false
                      dependencies: []
                      upgradeStrategy:
                        minimumHealthCapacity: 0.5
                        maximumOverCapacity: 0
                      version: '2015-09-28T19:47:37.681Z'
                      versionInfo:
                        lastScalingAt: '2015-09-28T19:47:37.681Z'
                        lastConfigChangeAt: '2015-09-28T19:47:37.681Z'
                    - id: /tools/datadog-agent
                      instances: 5
                      cpus: 1
                      mem: 512
                      disk: 0
                      executor: ''
                      constraints:
                        - - hostname
                          - UNIQUE
                      uris: []
                      storeUrls: []
                      ports:
                        - 10018
                      requirePorts: false
                      backoffSeconds: 1
                      backoffFactor: 1.15
                      maxLaunchDelaySeconds: 3600
                      container:
                        type: DOCKER
                        volumes:
                          - containerPath: /var/run/docker.sock
                            hostPath: /var/run/docker.sock
                            mode: RW
                          - containerPath: /host/proc/mounts
                            hostPath: /proc/mounts
                            mode: RO
                          - containerPath: /host/sys/fs/cgroup
                            hostPath: /sys/fs/cgroup/
                            mode: RO
                        docker:
                          image: 'datadog/docker-dd-agent:latest'
                          network: HOST
                          privileged: true
                          parameters: []
                          forcePullImage: false
                      healthChecks: []
                      dependencies: []
                      upgradeStrategy:
                        minimumHealthCapacity: 0.5
                        maximumOverCapacity: 0
                      version: '2015-08-26T22:33:24.225Z'
                      versionInfo:
                        lastScalingAt: '2015-08-26T22:33:24.225Z'
                        lastConfigChangeAt: '2015-05-19T13:59:18.899Z'
                  groups:
                    - id: /tools/log
                      apps: []
                      groups: []
                      dependencies: []
                      version: '2015-09-17T10:38:20.875Z'
                    - id: /tools/docker
                      apps:
                        - id: /tools/docker/registry
                          instances: 1
                          cpus: 0.5
                          mem: 4096
                          disk: 0
                          executor: ''
                          constraints: []
                          uris: []
                          storeUrls: []
                          ports:
                            - 5000
                          requirePorts: false
                          backoffSeconds: 1
                          backoffFactor: 1.15
                          maxLaunchDelaySeconds: 3600
                          container:
                            type: DOCKER
                            volumes:
                              - containerPath: /docker_storage
                                hostPath: /hdd/tools/docker/registry
                                mode: RW
                            docker:
                              image: registry
                              network: BRIDGE
                              portMappings:
                                - containerPort: 5000
                                  hostPort: 0
                                  servicePort: 5000
                                  protocol: tcp
                              privileged: false
                              parameters: []
                              forcePullImage: false
                          healthChecks: []
                          dependencies: []
                          upgradeStrategy:
                            minimumHealthCapacity: 1
                            maximumOverCapacity: 1
                          version: '2015-08-19T21:26:47.616Z'
                          versionInfo:
                            lastScalingAt: '2015-08-19T21:26:47.616Z'
                            lastConfigChangeAt: '2015-08-19T21:00:54.621Z'
                      groups: []
                      dependencies: []
                      version: '2015-09-17T10:38:20.875Z'
                  dependencies: []
                  version: '2015-09-17T10:38:20.875Z'
              dependencies: []
              version: '2015-09-17T10:38:20.875Z'
        '401':
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          examples:
            application/json:
              message: Invalid username or password.
        '403':
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          examples:
            application/json:
              message: 'Not Authorized to perform this action!'
      summary: ''
    put:
      description: |-
        Change parameters of a deployed application group. The new group parameters get applied.

        * Changes to application parameters will result in a restart of this application.
        * A new application added to the group will be started.
        * An existing application removed from the group will be stopped.

        If there are no changes to the application definition, no restart is triggered. During restart marathon keeps track, that the configured amount of minimal running instances are _always_ available.
        This method allows 2 special modes for the update operation>

        * Provide only the `version` field in the group definition. This will rollback the group to that given version
        * Provide only the `scaleBy` field will scale all transitive applications instance counts by the given factor.

        When one of version or scaleBy are set, nothing else than a version change or transitive instance count scaling will be applied. If both version and scaleBy are set, only a version rollback will be performed – the scaleBy value will not be applied.
        A deployment can run forever. This is the case, when the new application has a problem and does not become healthy. In this case, human interaction is needed with 2 possible choices

        * Rollback to an existing older version
        * Update with a newer version of the group which does not have the problems of the old one.

        Since the deployment of the group can take a considerable amount of time, this endpoint returns immediately with a version. The failure or success of the action is signalled via event. There is a group_change_success and group_change_failed with the given version.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: force
          in: query
          description: |-
            Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.
            Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
          required: false
          type: boolean
        - name: body
          in: body
          schema:
            $schema: 'http://json-schema.org/schema#'
            id: 'https://raw.githubusercontent.com/mesosphere/marathon/master/docs/docs/rest-api/public/api/v2/schema/Group.json'
            additionalProperties: false
            definitions:
              pathType:
                type: string
                pattern: "^(\\/?((\\.{2})|([a-z0-9][a-z0-9\\-.]*[a-z0-9]+)|([a-z0-9]*))($|\\/))+$"
                minLength: 1
            type: object
            properties:
              id:
                type: string
                $ref: '#/definitions/pathType'
                description: 'Unique identifier for the app consisting of a series of names separated by slashes. Each name must be at least 1 character and may only contain digits (`0-9`), dashes (`-`), dots (`.`), and lowercase letters (`a-z`). The name may not begin or end with a dash.'
              apps:
                type: array
                description: The list of AppDefinitions in this group. See AppDefinition.json for the schema.
                items:
                  $ref: ./AppDefinition.json
              groups:
                type: array
                description: Groups can build a tree. Each group can contain sub-groups. The sub-groups are defined here.
                items:
                  $ref: '#'
              dependencies:
                type: array
                description: 'A list of services upon which this application depends. An order is derived from the dependencies for performing start/stop and upgrade of the application. For example, an application /a relies on the services /b which itself relies on /c. To start all 3 applications, first /c is started than /b than /a.'
                items:
                  $ref: '#/definitions/pathType'
              version:
                type: string
                description: The version of this definition.
                format: date-time
            required:
              - id
      responses:
        '200':
          description: 'A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, than this means it is finished. As long as the deployment runs, the effect of that change operation is visible only partially.'
          examples:
            application/json:
              deploymentId: 5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43
              version: '2015-09-29T15:59:51.164Z'
        '400':
          description: The group definition provided in the body is not valid.
          examples:
            application/json:
              message: Invalid JSON
              details:
                - path: /id
                  errors:
                    - error.expected.jsstring
        '401':
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          examples:
            application/json:
              message: Invalid username or password.
        '403':
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          examples:
            application/json:
              message: 'Not Authorized to perform this action!'
        '409':
          description: 'There is an already running deployment, that affects this application. To override this deployment, use the force=true flag'
          examples:
            application/json:
              message: "App is locked by one or more deployments. Override with the option '?force=true'. View details at '/v2/deployments/<DEPLOYMENT_ID>'."
              deployments:
                - id: 97c136bf-5a28-4821-9d94-480d9fbb01c8
        '422':
          description: 'The entity send can not be preocessed, since there are validation errors'
          examples:
            application/json:
              message: Object is not valid
              details:
                - attribute: 'apps[0].id'
                  error: 'identifier /app is not child of /group. Hint: use relative paths.'
      summary: ''
    post:
      description: Create and start a new application group. Application groups can contain other application groups.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: force
          in: query
          description: |-
            Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.
            Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
          required: false
          type: boolean
        - name: body
          in: body
          schema:
            $schema: 'http://json-schema.org/schema#'
            id: 'https://raw.githubusercontent.com/mesosphere/marathon/master/docs/docs/rest-api/public/api/v2/schema/Group.json'
            additionalProperties: false
            definitions:
              pathType:
                type: string
                pattern: "^(\\/?((\\.{2})|([a-z0-9][a-z0-9\\-.]*[a-z0-9]+)|([a-z0-9]*))($|\\/))+$"
                minLength: 1
            type: object
            properties:
              id:
                type: string
                $ref: '#/definitions/pathType'
                description: 'Unique identifier for the app consisting of a series of names separated by slashes. Each name must be at least 1 character and may only contain digits (`0-9`), dashes (`-`), dots (`.`), and lowercase letters (`a-z`). The name may not begin or end with a dash.'
              apps:
                type: array
                description: The list of AppDefinitions in this group. See AppDefinition.json for the schema.
                items:
                  $ref: ./AppDefinition.json
              groups:
                type: array
                description: Groups can build a tree. Each group can contain sub-groups. The sub-groups are defined here.
                items:
                  $ref: '#'
              dependencies:
                type: array
                description: 'A list of services upon which this application depends. An order is derived from the dependencies for performing start/stop and upgrade of the application. For example, an application /a relies on the services /b which itself relies on /c. To start all 3 applications, first /c is started than /b than /a.'
                items:
                  $ref: '#/definitions/pathType'
              version:
                type: string
                description: The version of this definition.
                format: date-time
            required:
              - id
      responses:
        '200':
          description: 'A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, than this means it is finished. As long as the deployment runs, the effect of that change operation is visible only partially.'
          examples:
            application/json:
              deploymentId: 5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43
              version: '2015-09-29T15:59:51.164Z'
        '400':
          description: The group definition provided in the body is not valid.
          examples:
            application/json:
              message: Invalid JSON
              details:
                - path: /id
                  errors:
                    - error.expected.jsstring
        '401':
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          examples:
            application/json:
              message: Invalid username or password.
        '403':
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          examples:
            application/json:
              message: 'Not Authorized to perform this action!'
        '409':
          description: There is an already deployed group with this name
          examples:
            application/json:
              message: Group / is already created. Use PUT to change this group.
        '422':
          description: 'The entity send can not be preocessed, since there are validation errors'
          examples:
            application/json:
              message: Object is not valid
              details:
                - attribute: 'apps[0].id'
                  error: 'identifier /app is not child of /group. Hint: use relative paths.'
      summary: ''
    delete:
      description: Destroy a group. All data about that group and all associated applications will be deleted. The failure or success of the action is signalled via events. There is a group_change_success and group_change_failed with the given version.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: force
          in: query
          description: |-
            Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.
            Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
          required: false
          type: boolean
      responses:
        '200':
          description: 'A deployment is started which has a unique deployment identifier. The related deployment can be fetched from the /v2/deployments endpoint. If the deployement is gone from the list of deployments, than this means it is finished. As long as the deployment runs, the effect of that change operation is visible only partially.'
          examples:
            application/json:
              deploymentId: 5ed4c0c5-9ff8-4a6f-a0cd-f57f59a34b43
              version: '2015-09-29T15:59:51.164Z'
        '401':
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          examples:
            application/json:
              message: Invalid username or password.
        '403':
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          examples:
            application/json:
              message: 'Not Authorized to perform this action!'
        '409':
          description: 'There is an already running deployment, that affects this application. To override this deployment, use the force=true flag'
          examples:
            application/json:
              message: "App is locked by one or more deployments. Override with the option '?force=true'. View details at '/v2/deployments/<DEPLOYMENT_ID>'."
              deployments:
                - id: 97c136bf-5a28-4821-9d94-480d9fbb01c8
      summary: ''
  '/v2/groups/{group_id}/versions':
    parameters:
      - name: group_id
        in: path
        description: group_id
        required: true
        type: string
    get:
      description: List all versions the group with the specified path.
      consumes:
        - application/json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: List all available versions of that group.
          examples:
            application/json:
              - '2015-09-25T15:13:48.343Z'
              - '2015-09-11T11:11:22.692Z'
              - '2015-09-11T10:47:21.241Z'
        '401':
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          examples:
            application/json:
              message: Invalid username or password.
        '403':
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          examples:
            application/json:
              message: 'Not Authorized to perform this action!'
      summary: ''
  /v2/tasks:
    parameters: []
    get:
      description: List all running tasks.
      consumes:
        - application/json
      produces:
        - text/plain
        - application/json
      parameters:
        - name: status
          in: query
          description: Filter the list of tasks by status
          required: false
          type: string
          enum:
            - running
            - staging
      responses:
        '200':
          description: 'The list of all tasks disregarding their status, or a list of tasks matching the specified status filter.'
          examples:
            text/plain: "frontend-foosball\t10019\tsrv4.example.com:31292\ntools_docker_registry\t5000\tsrv2.example.com:31721\n"
        '401':
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          examples:
            application/json:
              message: Invalid username or password.
        '403':
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          examples:
            application/json:
              message: 'Not Authorized to perform this action!'
      summary: ''
  /v2/tasks/delete:
    parameters: []
    post:
      description: Kill a list of running tasks.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: force
          in: query
          description: |-
            Only one deployment can be applied to one application at the same time. If the existing deployment should be canceled by this change, you can set force=true.
            Caution&#58; setting force=true will cancel the current deployment. This paramter should be used only, if the current deployment is unsuccessful!
          required: false
          type: boolean
        - name: scale
          in: query
          description: 'If `scale=true` is specified, then the related application is scaled down by the number of killed tasks.'
          required: false
          type: boolean
      responses:
        '200':
          description: 'If scale=false, all tasks that were killed are returned. If scale=true, than a deployment is triggered and the deployment is returned.'
          examples:
            application/json:
              tasks:
                - id: frontend-foosball.083be411-5d1f-11e5-88f7-56b91e7a505b
                  host: srv4.example.com
                  ports:
                    - 31292
                  startedAt: '2015-09-17T09:32:42.598Z'
                  stagedAt: '2015-09-17T09:32:36.822Z'
                  version: '2015-09-17T09:32:36.583Z'
                  slaveId: 20150707-153709-201330860-5050-12052-S0
                  appId: /frontend-foosball
                  servicePorts:
                    - 10019
                - id: tools_docker_registry.002b4d28-46b9-11e5-b731-525400cce7ed
                  host: srv2.example.com
                  ports:
                    - 31721
                  startedAt: '2015-08-19T21:26:50.864Z'
                  stagedAt: '2015-08-19T21:26:49.040Z'
                  version: '2015-08-19T21:26:47.616Z'
                  slaveId: null
                  appId: /tools/docker/registry
                  servicePorts:
                    - 5000
        '400':
          description: 'There are unknown task ids, that can not be killed.'
          examples:
            application/json:
              message: Invalid task id not_known
        '401':
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          examples:
            application/json:
              message: Invalid username or password.
        '403':
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          examples:
            application/json:
              message: 'Not Authorized to perform this action!'
        '409':
          description: 'There is an already running deployment, that affects this application. To override this deployment, use the force=true flag'
          examples:
            application/json:
              message: "App is locked by one or more deployments. Override with the option '?force=true'. View details at '/v2/deployments/<DEPLOYMENT_ID>'."
              deployments:
                - id: 97c136bf-5a28-4821-9d94-480d9fbb01c8
      summary: ''
  /v2/artifacts:
    parameters: []
    post:
      description: 'Upload an artifact to the artifact store. A multipart form upload request has to be performed. The form parameter name has to be ```file```. The filename used in the artifact store, is the same as given by the form parameter. The response holds the URL of the artifact in the artifact store in the Location Header.'
      consumes:
        - multipart/form-data
      produces: []
      parameters:
        - name: file
          in: formData
          description: The file to upload
          type: file
      responses:
        default:
          description: ''
          schema: {}
      summary: ''
  '/v2/artifacts/{path}':
    parameters:
      - name: path
        in: path
        description: path
        required: true
        type: string
    put:
      description: Upload an artifact to the artifact store. A multipart form upload request has to be performed. The form parameter name has to be ```file```. The path used to store the file is taken from the url path. The response holds the URL of the artifact in the artifact store in the Location Header.
      consumes:
        - multipart/form-data
      produces: []
      parameters:
        - name: file
          in: formData
          description: The file to upload
          type: file
      responses:
        default:
          description: ''
          schema: {}
      summary: ''
    post:
      description: Upload an artifact to the artifact store. A multipart form upload request has to be performed. The form parameter name has to be ```file```. The path used to store the file is taken from the url path. The response holds the URL of the artifact in the artifact store in the Location Header.
      consumes:
        - multipart/form-data
      produces: []
      parameters:
        - name: file
          in: formData
          description: The file to upload
          type: file
      responses:
        default:
          description: ''
          schema: {}
      summary: ''
    delete:
      description: Delete an artifact from the artifact store. The path is the relative path in the artifact store.
      consumes:
        - application/json
      produces: []
      parameters: []
      responses:
        default:
          description: ''
          schema: {}
      summary: ''
    get:
      description: Download an artifact from the artifact store. The path is the relative path in the artifact store.
      consumes:
        - application/json
      produces: []
      parameters: []
      responses:
        default:
          description: ''
          schema: {}
      summary: ''
  /v2/events:
    parameters: []
    get:
      description: |-
        Attach to the marathon event stream.
        To use this endpoint, the client has to accept the text/event-stream content type.
        Please note a request to this endpoint will not be closed by the server. If an event happens on the server side, this event will be propagated to the client immediately. See [Server Sent Events](http://www.w3schools.com/html/html5_serversentevents.asp) for a more detailed explanation.
        Note for ApiConsole&#58; this function will not yield the expected result from inside ApiConsole.
      consumes:
        - application/json
      produces:
        - text/event-stream
        - text/html
      parameters: []
      responses:
        '200':
          description: the list of all tasks waiting to be scheduled.
          examples:
            text/event-stream: |+
              event: event_stream_attached
              data: {"remoteAddress":"0:0:0:0:0:0:0:1","eventType":"event_stream_attached","timestamp":"2015-09-30T12:44:30.061Z"}

              event: status_update_event
              data: {"slaveId":"20150707-153709-218108076-5050-25588-S6","taskId":"foo.0664256e-6771-11e5-94e1-be5b2935a987","taskStatus":"TASK_FAILED","message":"Failed to launch container: Failed to fetch all URIs for container '59d5cd89-091f-4454-940a-d9eb4361c640' with exit status: 256","appId":"/foo","host":"srv5.hw.ca1.mesosphere.com","ports":[31776],"version":"2015-09-30T09:09:17.614Z","eventType":"status_update_event","timestamp":"2015-09-30T12:44:45.681Z"}

              event: status_update_event
              data: {"slaveId":"20150707-153709-201330860-5050-12052-S0","taskId":"test-app.5dd78972-6771-11e5-94e1-be5b2935a987","taskStatus":"TASK_RUNNING","message":"","appId":"/test-app","host":"srv4.hw.ca1.mesosphere.com","ports":[31182],"version":"2015-09-11T22:11:03.156Z","eventType":"status_update_event","timestamp":"2015-09-30T12:47:11.286Z"}



        '405':
          description: A request has been made without the correct Accept Header
          examples:
            text/html: |
              <html>
              <head>
              <meta http-equiv="Content-Type" content="text/html;charset=ISO-8859-1"/>
              <title>Error 405 </title>
              </head>
              <body>
              <h2>HTTP ERROR: 405</h2>
              <p>Problem accessing /v2/events. Reason:
              <pre>    HTTP method GET is not supported by this URL</pre></p>
              <hr /><a href="http://eclipse.org/jetty">Powered by Jetty:// 9.3.z-SNAPSHOT</a><hr/>
              </body>
              </html>
      summary: ''
  /v2/eventSubscriptions:
    parameters: []
    get:
      description: 'List all event subscriber callback URLs. _NOTE To activate this endpoint, you need to startup a Marathon instance with `--event_subscriber http_callback`_'
      consumes:
        - application/json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Return the list of all subscription endpoints
          examples:
            application/json:
              callbackUrls:
                - 'http://server123:9090/callback'
                - 'http://server234:9191/callback'
      summary: ''
    post:
      description: Subscribe to the event callback mechanism with the specified callback URL.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: callbackUrl
          in: query
          description: The URL to an endpoint that is able to handle post requests for every event that is send.
          required: false
          type: string
          pattern: "^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$"
      responses:
        '200':
          description: ''
          examples:
            application/json:
              callbackUrl: 'http://localhost:9292/callback'
              clientIp: 127.0.0.1
              eventType: subscribe_event
      summary: ''
    delete:
      description: Unregister a callback URL from the event subscribers list.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: callbackUrl
          in: query
          description: The URL to an endpoint that is able to handle post requests for every event that is send.
          required: false
          type: string
          pattern: "^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$"
      responses:
        '200':
          description: ''
          examples:
            application/json:
              callbackUrl: 'http://localhost:9292/callback'
              clientIp: 127.0.0.1
              eventType: unsubscribe_event
      summary: ''
  /v2/info:
    parameters: []
    get:
      description: Get info about the Marathon Instance
      consumes:
        - application/json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: General configuration and runtime information about this Marathon instance.
          examples:
            application/json:
              name: marathon
              version: 0.13.0-SNAPSHOT
              elected: true
              leader: 'wrk.fritz.box:8080'
              frameworkId: 80ba2050-bf0f-4472-a2f7-2636c4f7b8c8-0000
              marathon_config:
                master: '127.0.0.1:5050'
                failover_timeout: 604800
                framework_name: marathon
                ha: true
                checkpoint: true
                local_port_min: 10000
                local_port_max: 20000
                executor: //cmd
                hostname: wrk.fritz.box
                webui_url: null
                mesos_role: null
                task_launch_timeout: 300000
                reconciliation_initial_delay: 15000
                reconciliation_interval: 300000
                marathon_store_timeout: 2000
                mesos_user: matthias
                leader_proxy_connection_timeout_ms: 5000
                leader_proxy_read_timeout_ms: 10000
                mesos_leader_ui_url: null
              zookeeper_config:
                zk: 'zk://localhost:2181/marathon'
                zk_timeout: 10000
                zk_session_timeout: 1800000
                zk_max_versions: 25
              event_subscriber: null
              http_config:
                assets_path: null
                http_port: 8080
                https_port: 8443
      summary: ''
  /v2/leader:
    parameters: []
    get:
      description: Returns the current leader.
      consumes:
        - application/json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: The host and port of the current leading master.
          examples:
            application/json:
              leader: 'marathon.globalcorp.com:8080'
        '404':
          description: If there is no current leader.
          examples:
            application/json:
              message: There is no leader
      summary: ''
    delete:
      description: 'Causes the current leader to abdicate, triggering a new election.'
      consumes:
        - application/json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: The abdication message from the current leader.
          examples:
            application/json:
              message: Leadership abdicated
        '404':
          description: If there is no current leader.
          examples:
            application/json:
              message: There is no leader
      summary: ''
  /v2/plugins:
    parameters: []
    get:
      description: Returns the list of all loaded plugins
      consumes:
        - application/json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: The list of all loaded plugins
          examples:
            application/json:
              plugins:
                - id: webjar
                  implementation: mesosphere.marathon.example.plugin.http.WebJarHandler
                  info:
                    version: 1.2.3
                    array:
                      - 1
                      - 2
                      - 3
                      - 4
                      - 5
                      - 6
                    test: true
                  plugin: mesosphere.marathon.plugin.http.HttpRequestHandler
                  tags:
                    - webjar
                    - test
      summary: ''
  '/v2/plugins/{plugin_id}/{path}':
    parameters:
      - name: plugin_id
        in: path
        description: plugin_id
        required: true
        type: string
      - name: path
        in: path
        description: path
        required: true
        type: string
    get:
      description: Get request is handled by the plugin.
      consumes:
        - application/json
      produces: []
      parameters: []
      responses:
        default:
          description: ''
          schema: {}
      summary: ''
    put:
      description: Put request is handled by the plugin.
      consumes:
        - application/json
      produces: []
      parameters: []
      responses:
        default:
          description: ''
          schema: {}
      summary: ''
    post:
      description: Post request is handled by the plugin.
      consumes:
        - application/json
      produces: []
      parameters: []
      responses:
        default:
          description: ''
          schema: {}
      summary: ''
    delete:
      description: Delete request is handled by the plugin.
      consumes:
        - application/json
      produces: []
      parameters: []
      responses:
        default:
          description: ''
          schema: {}
      summary: ''
  /v2/queue:
    parameters: []
    get:
      description: |-
        List all the tasks queued up or waiting to be scheduled. This is mainly used for troubleshooting and occurs when scaling changes are requested and the volume of scaling changes out paces the ability to schedule those tasks.
        In addition to the application in the queue, you see also the task count that needs to be started.
        If the task has a rate limit, then a delay to the start gets applied. You can see this delay for every application with the seconds to wait before the next launch will be tried.
      consumes:
        - application/json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: the list of all tasks waiting to be scheduled.
          examples:
            application/json:
              queue:
                - app:
                    id: /tools/datadog-agent
                    cmd: null
                    args: null
                    user: null
                    env: {}
                    instances: 5
                    cpus: 1
                    mem: 512
                    disk: 0
                    executor: ''
                    constraints:
                      - - hostname
                        - UNIQUE
                    uris: []
                    storeUrls: []
                    ports:
                      - 10018
                    requirePorts: false
                    backoffSeconds: 1
                    backoffFactor: 1.15
                    maxLaunchDelaySeconds: 3600
                    container:
                      type: DOCKER
                      volumes: []
                      docker:
                        image: 'datadog/docker-dd-agent:latest'
                        network: HOST
                        privileged: true
                        parameters: []
                        forcePullImage: false
                    healthChecks: []
                    dependencies: []
                    upgradeStrategy:
                      minimumHealthCapacity: 0.5
                      maximumOverCapacity: 0
                    labels: {}
                    acceptedResourceRoles: null
                    version: '2015-08-26T22:33:24.225Z'
                    versionInfo:
                      lastScalingAt: '2015-08-26T22:33:24.225Z'
                      lastConfigChangeAt: '2015-05-19T13:59:18.899Z'
                  count: 1
                  delay:
                    timeLeftSeconds: 0
                    overdue: true
                - app:
                    id: /foo
                    cmd: null
                    args: null
                    user: root
                    env:
                      MASTER: 'zk://172.16.0.12:2181,172.16.0.13:2181,172.16.0.14:2181/mesos'
                    instances: 1
                    cpus: 0.5
                    mem: 128
                    disk: 0
                    executor: //cmd
                    constraints:
                      - - hostname
                        - UNIQUE
                    uris:
                      - 'http://www.mesosphere.io/index.html'
                    storeUrls: []
                    ports:
                      - 10010
                    requirePorts: false
                    backoffSeconds: 1
                    backoffFactor: 1.15
                    maxLaunchDelaySeconds: 3600
                    container:
                      type: DOCKER
                      volumes: []
                      docker:
                        image: thomasr/dispatch
                        network: HOST
                        privileged: false
                        parameters: []
                        forcePullImage: false
                    healthChecks: []
                    dependencies: []
                    upgradeStrategy:
                      minimumHealthCapacity: 1
                      maximumOverCapacity: 1
                    labels: {}
                    acceptedResourceRoles: null
                    version: '2015-09-30T09:09:17.614Z'
                    versionInfo:
                      lastScalingAt: '2015-09-30T09:09:17.614Z'
                      lastConfigChangeAt: '2015-09-30T09:09:17.614Z'
                  count: 2
                  delay:
                    timeLeftSeconds: 0
                    overdue: true
        '401':
          description: Unauthorized. Authentication is enabled and you did not provide enough or wrong information to authenticate that request.
          examples:
            application/json:
              message: Invalid username or password.
        '403':
          description: Forbidden. Authorization is granted but the identity provided does not have sufficient access rights to do that action.
          examples:
            application/json:
              message: 'Not Authorized to perform this action!'
      summary: ''
  '/v2/queue/{app_id}/delay':
    parameters:
      - name: app_id
        in: path
        description: app_id
        required: true
        type: string
    delete:
      description: 'If an application fails too often in a specified amount of time (according to the application definition), the task launch will be delayed. This delay can be removed by calling this endpoint. The effect is, that the tasks of this application will be launched immediately.'
      consumes:
        - application/json
      produces: []
      parameters: []
      responses:
        default:
          description: ''
          schema: {}
      summary: ''
  /ping:
    parameters: []
    get:
      description: Ping this Marathon instance.
      consumes:
        - application/json
      produces:
        - text/plain
      parameters: []
      responses:
        '200':
          description: Every ping is answered with a pong.
          examples:
            text/plain: pong
      summary: ''
  /metrics:
    parameters: []
    get:
      description: Get metrics data from this Marathon instance
      consumes:
        - application/json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: All aggregated runtime metrics for this Marathon instance.
          examples:
            application/json:
              counters:
                name.of.counter:
                  count: 1
              gauges:
                name.of.gauge:
                  value: 7248
              histograms:
                name.of.histogram:
                  count: 0
                  max: 0
                  mean: 0
                  min: 0
                  p50: 0
                  p75: 0
                  p95: 0
                  p98: 0
                  p99: 0
                  p999: 0
                  stddev: 0
              meters:
                name.of.meter:
                  count: 0
                  m15_rate: 0
                  m1_rate: 0
                  m5_rate: 0
                  mean_rate: 0
                  units: events/second
              timers:
                name.of.timer:
                  count: 1
                  duration_units: seconds
                  m15_rate: 0.2
                  m1_rate: 0.2
                  m5_rate: 0.2
                  max: 0.0021718640000000003
                  mean: 0.0021718640000000003
                  mean_rate: 0.13897812037014803
                  min: 0.0021718640000000003
                  p50: 0.0021718640000000003
                  p75: 0.0021718640000000003
                  p95: 0.0021718640000000003
                  p98: 0.0021718640000000003
                  p99: 0.0021718640000000003
                  p999: 0.0021718640000000003
                  rate_units: calls/second
                  stddev: 0
              version: 3.0.0
      summary: ''
definitions:
  AppDefinition:
    $schema: 'http://json-schema.org/schema#'
    additionalProperties: false
    definitions:
      pathType:
        type: string
        pattern: "^(\\/?((\\.{2})|([a-z0-9][a-z0-9\\-.]*[a-z0-9]+)|([a-z0-9]*))($|\\/))+$"
        minLength: 1
    not:
      allOf:
        - required:
            - cmd
        - required:
            - args
    properties:
      acceptedResourceRoles:
        items:
          type: string
        type: array
        description: 'Optional. A list of resource roles. Marathon considers only resource offers with roles in this list for launching tasks of this app. If you do not specify this, Marathon considers all resource offers with roles that have been configured by the `--default_accepted_resource_roles` command line flag. If no `--default_accepted_resource_roles` was given on startup, Marathon considers all resource offers. To register Marathon for a role, you need to specify the `--mesos_role` command line flag on startup. If you want to assign all resources of a slave to a role, you can use the `--default_role` argument when starting up the slave. If you need a more fine-grained configuration, you can use the `--resources` argument to specify resource shares per role. The Mesos master needs to be started with `--roles` followed by a comma-separated list of all roles you want to use across your cluster. See [the Mesos command line documentation](http://mesos.apache.org/documentation/latest/configuration/) for details.'
      args:
        items:
          type: string
        type: array
        description: An array of strings that represents an alternative mode of specifying the command to run. This was motivated by safe usage of containerizer features like a custom Docker ENTRYPOINT. This args field may be used in place of cmd even when using the default command executor. This change mirrors API and semantics changes in the Mesos CommandInfo protobuf message starting with version `0.20.0`.  Either `cmd` or `args` must be supplied. It is invalid to supply both `cmd` and `args` in the same app.
      backoffFactor:
        minimum: 1
        type: number
        description: Configures exponential backoff behavior when launching potentially sick apps. This prevents sandboxes associated with consecutively failing tasks from filling up the hard disk on Mesos slaves. The backoff period is multiplied by the factor for each consecutive failure until it reaches maxLaunchDelaySeconds. This applies also to tasks that are killed due to failing too many health checks.
      backoffSeconds:
        description: Configures exponential backoff behavior when launching potentially sick apps. This prevents sandboxes associated with consecutively failing tasks from filling up the hard disk on Mesos slaves. The backoff period is multiplied by the factor for each consecutive failure until it reaches maxLaunchDelaySeconds. This applies also to tasks that are killed due to failing too many health checks.
        minimum: 0
        type: integer
      cmd:
        description: 'The command that is executed.  This value is wrapped by Mesos via `/bin/sh -c ${app.cmd}`.  Either `cmd` or `args` must be supplied. It is invalid to supply both `cmd` and `args` in the same app.'
        type: string
        minLength: 1
      constraints:
        type: array
        items:
          type: array
          items:
            - type: string
            - type: string
              enum:
                - UNIQUE
                - CLUSTER
                - GROUP_BY
                - LIKE
                - UNLIKE
            - type: string
          minItems: 2
          additionalItems: false
        description: 'Valid constraint operators are one of UNIQUE, CLUSTER, GROUP_BY, LIKE, UNLIKE.'
      container:
        additionalProperties: false
        properties:
          docker:
            additionalProperties: false
            properties:
              forcePullImage:
                type: boolean
                description: 'The container will be pulled, regardless if it is already available on the local system.'
              image:
                type: string
                minLength: 1
                description: The name of the docker image to use.
              network:
                type: string
                description: 'The networking mode, this container should operate in. One of BRIDGED|HOST|NONE'
                enum:
                  - BRIDGE
                  - HOST
                  - NONE
              parameters:
                type: array
                description: 'Allowing arbitrary parameters to be passed to docker CLI. Note that anything passed to this field is not guaranteed to be supported moving forward, as we might move away from the docker CLI.'
                items:
                  type: object
                  additionalProperties: false
                  properties:
                    key:
                      type: string
                      minLength: 1
                      description: Key of this parameter
                    value:
                      type: string
                      description: Value of this parameter
                  required:
                    - key
                    - value
              portMappings:
                type: array
                items:
                  type: object
                  additionalProperties: false
                  properties:
                    containerPort:
                      type: integer
                      description: 'Refers to the port the application listens to inside of the container. It is optional and now defaults to 0, in which case Marathon assigns the container port the same value as the assigned hostPort. This is especially useful for apps that advertise the port they are listening on to the outside world for P2P communication. Without containerPort: 0 they would erroneously advertise their private container port which is usually not the same as the externally visible host port.'
                      maximum: 65535
                      minimum: 0
                    hostPort:
                      type: integer
                      description: 'Retains the traditional meaning in Marathon, which is a random port from the range included in the Mesos resource offer. The resulting host ports for each task are exposed via the task details in the REST API and the Marathon web UI. hostPort is optional and defaults to 0.'
                      maximum: 65535
                      minimum: 0
                    protocol:
                      type: string
                      description: parameter is optional and defaults to tcp.
                    servicePort:
                      type: integer
                      description: 'Is a helper port intended for doing service discovery using a well-known port per service. The assigned servicePort value is not used/interpreted by Marathon itself but supposed to used by load balancer infrastructure. See Service Discovery Load Balancing doc page. The servicePort parameter is optional and defaults to 0. Like hostPort, If the value is 0, a random port will be assigned. If a servicePort value is assigned by Marathon then Marathon guarantees that its value is unique across the cluster. The values for random service ports are in the range [local_port_min, local_port_max] where local_port_min and local_port_max are command line options with default values of 10000 and 20000, respectively.'
                      maximum: 65535
                      minimum: 0
              privileged:
                type: boolean
                description: Run this docker image in privileged mode.
            required:
              - image
            type: object
          type:
            type: string
            description: Supported container types at the moment are DOCKER and MESOS.
            enum:
              - MESOS
              - DOCKER
          volumes:
            items:
              additionalProperties: false
              properties:
                containerPath:
                  type: string
                  description: The path of the volume in the container
                  minLength: 1
                hostPath:
                  type: string
                  description: The path of the volume on the host
                  minLength: 1
                persistent:
                  additionalProperties: false
                  properties:
                    size:
                      type: integer
                      description: The size of the persistent volume in MiB
                      minimum: 0
                  type: object
                mode:
                  type: string
                  description: Possible values are RO for ReadOnly and RW for Read/Write
                  enum:
                    - RO
                    - RW
              type: object
            type: array
        type: object
      cpus:
        type: number
        description: 'The number of CPU shares this application needs per instance. This number does not have to be integer, but can be a fraction.'
        minimum: 0
      dependencies:
        type: array
        description: 'A list of services upon which this application depends. An order is derived from the dependencies for performing start/stop and upgrade of the application. For example, an application /a relies on the services /b which itself relies on /c. To start all 3 applications, first /c is started than /b than /a.'
        items:
          $ref: '#/definitions/pathType'
      disk:
        type: number
        description: 'How much disk space is needed for this application. This number does not have to be an integer, but can be a fraction.'
        minimum: 0
      env:
        patternProperties:
          '.*':
            type: string
        type: object
      executor:
        type: string
        description: 'The executor to use to launch this application. Different executors are available. The simplest one (and the default if none is given) is //cmd, which takes the cmd and executes that on the shell level.'
        pattern: "^(|\\/\\/cmd|\\/?[^\\/]+(\\/[^\\/]+)*)$"
      fetch:
        type: array
        description: Provided URIs are passed to Mesos fetcher module and resolved in runtime.
        items:
          type: object
          additionalProperties: false
          properties:
            uri:
              type: string
              description: URI to be fetched by Mesos fetcher module
            executable:
              type: boolean
              description: Set fetched artifact as executable
            extract:
              type: boolean
              description: Extract fetched artifact if supported by Mesos fetcher module
            cache:
              type: boolean
              description: Cache fetched artifact if supported by Mesos fetcher module
          required:
            - uri
      healthChecks:
        items:
          type: object
          additionalProperties: false
          properties:
            command:
              type: object
              items:
                additionalProperties: false
                properties:
                  value:
                    type: string
                    description: The health check command to execute.
            gracePeriodSeconds:
              type: integer
              description: Health check failures are ignored within this number of seconds of the task being started or until the task becomes healthy for the first time.
              minimum: 0
            ignoreHttp1xx:
              type: boolean
              description: Ignore HTTP 1xx responses.
            intervalSeconds:
              type: integer
              description: Number of seconds to wait between health checks.
              minimum: 0
            maxConsecutiveFailures:
              type: integer
              description: Number of consecutive health check failures after which the unhealthy task should be killed.
              minimum: 0
            path:
              type: string
              description: 'Path to endpoint exposed by the task that will provide health status. Example: /path/to/health. Note: only used if protocol == HTTP[S].'
            port:
              type: integer
              description: 'The specific port to connect to. In case of dynamic ports, see portIndex.'
              maximum: 65535
              minimum: 0
            portIndex:
              type: integer
              description: "Index in this app's ports array to be used for health requests. An index is used so the app can use random ports, like [0, 0, 0] for example, and tasks could be started with port environment variables like $PORT1."
              minimum: 0
            protocol:
              type: string
              description: 'Protocol of the requests to be performed. One of HTTP, HTTPS, TCP or COMMAND.'
              enum:
                - HTTP
                - HTTPS
                - TCP
                - COMMAND
            timeoutSeconds:
              type: integer
              description: Number of seconds after which a health check is considered a failure regardless of the response.
              minimum: 0
        type: array
      id:
        $ref: '#/definitions/pathType'
        description: 'Unique identifier for the app consisting of a series of names separated by slashes. Each name must be at least 1 character and may only contain digits (`0-9`), dashes (`-`), dots (`.`), and lowercase letters (`a-z`). The name may not begin or end with a dash.'
      instances:
        type: integer
        description: 'The number of instances of this application to start. Please note: this number can be changed any time as needed to scale the application.'
        minimum: 0
      labels:
        type: object
        description: 'Attaching metadata to apps can be useful to expose additional information to other services, so we added the ability to place labels on apps (for example, you could label apps staging and production to mark services by their position in the pipeline).'
        additionalProperties:
          type: string
      maxLaunchDelaySeconds:
        type: integer
        description: Configures exponential backoff behavior when launching potentially sick apps. This prevents sandboxes associated with consecutively failing tasks from filling up the hard disk on Mesos slaves. The backoff period is multiplied by the factor for each consecutive failure until it reaches maxLaunchDelaySeconds. This applies also to tasks that are killed due to failing too many health checks.
        minimum: 0
      mem:
        type: number
        description: The amount of memory in MB that is needed for the application per instance.
        minimum: 0
      ipAddress:
        type: object
        description: "If an application definition includes the 'ipAddress' field, then Marathon will request a per-task IP from Mesos. A separate ports/portMappings configuration is then disallowed."
        properties:
          discovery:
            type: object
            description: Information useful for service discovery.
            properties:
              ports:
                type: array
                description: Array of objects describing the ports exposed by each task.
                items:
                  type: object
                  description: Port
                  properties:
                    number:
                      maximum: 65535
                      minimum: 0
                      type: integer
                      description: The port number.
                    name:
                      type: string
                      description: Name of the port.
                      pattern: '^[a-z][a-z0-9-]*$'
                    protocol:
                      enum:
                        - tcp
                        - udp
                      description: "Protocol of the port (one of ['tcp', 'udp'])."
          groups:
            type: array
            description: Array of network groups. One IP address can belong to zero or more network groups. The idea is that containers can only reach containers with which they share at least one network group.
            items:
              type: string
              description: The name of the network group.
          labels:
            type: object
            description: Key value pair for meta data on that network interface.
            properties: {}
            additionalProperties: true
      ports:
        type: array
        description: 'An array of required port resources on the agent host. The number of items in the array determines how many dynamic ports are allocated for every task. For every port that is zero, a globally unique (cluster-wide) port is assigned and provided as part of the app definition to be used in load balancing definitions.'
        items:
          maximum: 65535
          minimum: 0
          type: integer
      residency:
        type: object
        description: 'When using local persistent volumes that pin tasks onto agents, these values define how Marathon handles terminal states of these tasks.'
        properties:
          relaunchEscalationTimeoutSeconds:
            type: integer
            description: "When a task using persistent local volumes cannot be restarted on the agent it's been pinned to, Marathon will try to launch this task on another node after this timeout. Defaults to 3600 (one hour)."
            minimum: 0
            additionalProperties: false
          taskLostBehavior:
            type: string
            description: 'When Marathon receives a TASK_LOST status update indicating that the agent running the task is gone, this property defines whether Marathon will launch the task on another node or not. Defaults to WAIT_FOREVER'
            enum:
              - WAIT_FOREVER
              - RELAUNCH_AFTER_TIMEOUT
            additionalProperties: false
        additionalProperties: false
      requirePorts:
        type: boolean
        description: 'Normally, the host ports of your tasks are automatically assigned. This corresponds to the requirePorts value false which is the default. If you need more control and want to specify your host ports in advance, you can set requirePorts to true. This way the ports you have specified are used as host ports. That also means that Marathon can schedule the associated tasks only on hosts that have the specified ports available.'
      storeUrls:
        type: array
        description: "URL's that have to be resolved and put into the artifact store, before the task will be started."
        items:
          type: string
          minLength: 1
      upgradeStrategy:
        type: object
        description: During an upgrade all instances of an application get replaced by a new version. The upgradeStrategy controls how Marathon stops old versions and launches new versions.
        additionalProperties: false
        properties:
          maximumOverCapacity:
            type: number
            description: A number between 0 and 1 which is multiplied with the instance count. This is the maximum number of additional instances launched at any point of time during the upgrade process.
            maximum: 1
            minimum: 0
          minimumHealthCapacity:
            type: number
            description: 'A number between 0 and 1 that is multiplied with the instance count. This is the minimum number of healthy nodes that do not sacrifice overall application purpose. Marathon will make sure, during the upgrade process, that at any point of time this number of healthy instances are up.'
            maximum: 1
            minimum: 0
      uris:
        type: array
        description: 'URIs defined here are resolved, before the application gets started. If the application has external dependencies, they should be defined here.'
        items:
          type: string
          minLength: 1
      user:
        type: string
        description: The user to use to run the tasks on the agent.
      version:
        type: string
        description: The version of this definition.
        format: date-time
      versionInfo:
        type: object
        description: Detailed version information.
        additionalProperties: false
        properties:
          lastScalingAt:
            type: string
            description: Contains the time stamp of the last change to this app which was not simply a scaling or a restarting configuration.
            format: date-time
          lastConfigChangeAt:
            type: string
            description: 'Contains the time stamp of the last change including changes like scaling or restarting the app. Since our versions are time based, this is currently equal to version.'
            format: date-time
    required:
      - id
    type: object
  Group:
    $schema: 'http://json-schema.org/schema#'
    id: 'https://raw.githubusercontent.com/mesosphere/marathon/master/docs/docs/rest-api/public/api/v2/schema/Group.json'
    additionalProperties: false
    definitions:
      pathType:
        type: string
        pattern: "^(\\/?((\\.{2})|([a-z0-9][a-z0-9\\-.]*[a-z0-9]+)|([a-z0-9]*))($|\\/))+$"
        minLength: 1
    type: object
    properties:
      id:
        type: string
        $ref: '#/definitions/pathType'
        description: 'Unique identifier for the app consisting of a series of names separated by slashes. Each name must be at least 1 character and may only contain digits (`0-9`), dashes (`-`), dots (`.`), and lowercase letters (`a-z`). The name may not begin or end with a dash.'
      apps:
        type: array
        description: The list of AppDefinitions in this group. See AppDefinition.json for the schema.
        items:
          $ref: ./AppDefinition.json
      groups:
        type: array
        description: Groups can build a tree. Each group can contain sub-groups. The sub-groups are defined here.
        items:
          $ref: '#'
      dependencies:
        type: array
        description: 'A list of services upon which this application depends. An order is derived from the dependencies for performing start/stop and upgrade of the application. For example, an application /a relies on the services /b which itself relies on /c. To start all 3 applications, first /c is started than /b than /a.'
        items:
          $ref: '#/definitions/pathType'
      version:
        type: string
        description: The version of this definition.
        format: date-time
    required:
      - id
