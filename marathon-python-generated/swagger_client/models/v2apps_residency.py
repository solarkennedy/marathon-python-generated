# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class V2appsResidency(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        V2appsResidency - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'relaunch_escalation_timeout_seconds': 'int',
            'task_lost_behavior': 'str'
        }

        self.attribute_map = {
            'relaunch_escalation_timeout_seconds': 'relaunchEscalationTimeoutSeconds',
            'task_lost_behavior': 'taskLostBehavior'
        }

        self._relaunch_escalation_timeout_seconds = None
        self._task_lost_behavior = None

    @property
    def relaunch_escalation_timeout_seconds(self):
        """
        Gets the relaunch_escalation_timeout_seconds of this V2appsResidency.
        When a task using persistent local volumes cannot be restarted on the agent it's been pinned to, Marathon will try to launch this task on another node after this timeout. Defaults to 3600 (one hour).

        :return: The relaunch_escalation_timeout_seconds of this V2appsResidency.
        :rtype: int
        """
        return self._relaunch_escalation_timeout_seconds

    @relaunch_escalation_timeout_seconds.setter
    def relaunch_escalation_timeout_seconds(self, relaunch_escalation_timeout_seconds):
        """
        Sets the relaunch_escalation_timeout_seconds of this V2appsResidency.
        When a task using persistent local volumes cannot be restarted on the agent it's been pinned to, Marathon will try to launch this task on another node after this timeout. Defaults to 3600 (one hour).

        :param relaunch_escalation_timeout_seconds: The relaunch_escalation_timeout_seconds of this V2appsResidency.
        :type: int
        """
        self._relaunch_escalation_timeout_seconds = relaunch_escalation_timeout_seconds

    @property
    def task_lost_behavior(self):
        """
        Gets the task_lost_behavior of this V2appsResidency.
        When Marathon receives a TASK_LOST status update indicating that the agent running the task is gone, this property defines whether Marathon will launch the task on another node or not. Defaults to WAIT_FOREVER

        :return: The task_lost_behavior of this V2appsResidency.
        :rtype: str
        """
        return self._task_lost_behavior

    @task_lost_behavior.setter
    def task_lost_behavior(self, task_lost_behavior):
        """
        Sets the task_lost_behavior of this V2appsResidency.
        When Marathon receives a TASK_LOST status update indicating that the agent running the task is gone, this property defines whether Marathon will launch the task on another node or not. Defaults to WAIT_FOREVER

        :param task_lost_behavior: The task_lost_behavior of this V2appsResidency.
        :type: str
        """
        allowed_values = ["WAIT_FOREVER", "RELAUNCH_AFTER_TIMEOUT"]
        if task_lost_behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `task_lost_behavior`, must be one of {0}"
                .format(allowed_values)
            )
        self._task_lost_behavior = task_lost_behavior

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

