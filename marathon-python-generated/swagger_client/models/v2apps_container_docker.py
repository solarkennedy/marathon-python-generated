# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class V2appsContainerDocker(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        V2appsContainerDocker - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'privileged': 'bool',
            'image': 'str',
            'parameters': 'list[V2appsContainerDockerParameters]',
            'force_pull_image': 'bool',
            'network': 'str',
            'port_mappings': 'list[V2appsContainerDockerPortMappings]'
        }

        self.attribute_map = {
            'privileged': 'privileged',
            'image': 'image',
            'parameters': 'parameters',
            'force_pull_image': 'forcePullImage',
            'network': 'network',
            'port_mappings': 'portMappings'
        }

        self._privileged = None
        self._image = None
        self._parameters = None
        self._force_pull_image = None
        self._network = None
        self._port_mappings = None

    @property
    def privileged(self):
        """
        Gets the privileged of this V2appsContainerDocker.
        Run this docker image in privileged mode.

        :return: The privileged of this V2appsContainerDocker.
        :rtype: bool
        """
        return self._privileged

    @privileged.setter
    def privileged(self, privileged):
        """
        Sets the privileged of this V2appsContainerDocker.
        Run this docker image in privileged mode.

        :param privileged: The privileged of this V2appsContainerDocker.
        :type: bool
        """
        self._privileged = privileged

    @property
    def image(self):
        """
        Gets the image of this V2appsContainerDocker.
        The name of the docker image to use.

        :return: The image of this V2appsContainerDocker.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """
        Sets the image of this V2appsContainerDocker.
        The name of the docker image to use.

        :param image: The image of this V2appsContainerDocker.
        :type: str
        """
        self._image = image

    @property
    def parameters(self):
        """
        Gets the parameters of this V2appsContainerDocker.
        Allowing arbitrary parameters to be passed to docker CLI. Note that anything passed to this field is not guaranteed to be supported moving forward, as we might move away from the docker CLI.

        :return: The parameters of this V2appsContainerDocker.
        :rtype: list[V2appsContainerDockerParameters]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this V2appsContainerDocker.
        Allowing arbitrary parameters to be passed to docker CLI. Note that anything passed to this field is not guaranteed to be supported moving forward, as we might move away from the docker CLI.

        :param parameters: The parameters of this V2appsContainerDocker.
        :type: list[V2appsContainerDockerParameters]
        """
        self._parameters = parameters

    @property
    def force_pull_image(self):
        """
        Gets the force_pull_image of this V2appsContainerDocker.
        The container will be pulled, regardless if it is already available on the local system.

        :return: The force_pull_image of this V2appsContainerDocker.
        :rtype: bool
        """
        return self._force_pull_image

    @force_pull_image.setter
    def force_pull_image(self, force_pull_image):
        """
        Sets the force_pull_image of this V2appsContainerDocker.
        The container will be pulled, regardless if it is already available on the local system.

        :param force_pull_image: The force_pull_image of this V2appsContainerDocker.
        :type: bool
        """
        self._force_pull_image = force_pull_image

    @property
    def network(self):
        """
        Gets the network of this V2appsContainerDocker.
        The networking mode, this container should operate in. One of BRIDGED|HOST|NONE

        :return: The network of this V2appsContainerDocker.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """
        Sets the network of this V2appsContainerDocker.
        The networking mode, this container should operate in. One of BRIDGED|HOST|NONE

        :param network: The network of this V2appsContainerDocker.
        :type: str
        """
        allowed_values = ["BRIDGE", "HOST", "NONE"]
        if network not in allowed_values:
            raise ValueError(
                "Invalid value for `network`, must be one of {0}"
                .format(allowed_values)
            )
        self._network = network

    @property
    def port_mappings(self):
        """
        Gets the port_mappings of this V2appsContainerDocker.


        :return: The port_mappings of this V2appsContainerDocker.
        :rtype: list[V2appsContainerDockerPortMappings]
        """
        return self._port_mappings

    @port_mappings.setter
    def port_mappings(self, port_mappings):
        """
        Sets the port_mappings of this V2appsContainerDocker.


        :param port_mappings: The port_mappings of this V2appsContainerDocker.
        :type: list[V2appsContainerDockerPortMappings]
        """
        self._port_mappings = port_mappings

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

