# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Volume(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Volume - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'container_path': 'str',
            'host_path': 'str',
            'mode': 'Mode',
            'persistent': 'Persistent'
        }

        self.attribute_map = {
            'container_path': 'containerPath',
            'host_path': 'hostPath',
            'mode': 'mode',
            'persistent': 'persistent'
        }

        self._container_path = None
        self._host_path = None
        self._mode = None
        self._persistent = None

    @property
    def container_path(self):
        """
        Gets the container_path of this Volume.
        The path of the volume in the container

        :return: The container_path of this Volume.
        :rtype: str
        """
        return self._container_path

    @container_path.setter
    def container_path(self, container_path):
        """
        Sets the container_path of this Volume.
        The path of the volume in the container

        :param container_path: The container_path of this Volume.
        :type: str
        """
        self._container_path = container_path

    @property
    def host_path(self):
        """
        Gets the host_path of this Volume.
        The path of the volume on the host

        :return: The host_path of this Volume.
        :rtype: str
        """
        return self._host_path

    @host_path.setter
    def host_path(self, host_path):
        """
        Sets the host_path of this Volume.
        The path of the volume on the host

        :param host_path: The host_path of this Volume.
        :type: str
        """
        self._host_path = host_path

    @property
    def mode(self):
        """
        Gets the mode of this Volume.
        Possible values are RO for ReadOnly and RW for Read/Write

        :return: The mode of this Volume.
        :rtype: Mode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """
        Sets the mode of this Volume.
        Possible values are RO for ReadOnly and RW for Read/Write

        :param mode: The mode of this Volume.
        :type: Mode
        """
        self._mode = mode

    @property
    def persistent(self):
        """
        Gets the persistent of this Volume.


        :return: The persistent of this Volume.
        :rtype: Persistent
        """
        return self._persistent

    @persistent.setter
    def persistent(self, persistent):
        """
        Sets the persistent of this Volume.


        :param persistent: The persistent of this Volume.
        :type: Persistent
        """
        self._persistent = persistent

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

