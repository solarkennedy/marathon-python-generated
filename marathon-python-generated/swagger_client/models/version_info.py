# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class VersionInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        VersionInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'last_config_change_at': 'datetime',
            'last_scaling_at': 'datetime'
        }

        self.attribute_map = {
            'last_config_change_at': 'lastConfigChangeAt',
            'last_scaling_at': 'lastScalingAt'
        }

        self._last_config_change_at = None
        self._last_scaling_at = None

    @property
    def last_config_change_at(self):
        """
        Gets the last_config_change_at of this VersionInfo.
        Contains the time stamp of the last change including changes like scaling or restarting the app. Since our versions are time based, this is currently equal to version.

        :return: The last_config_change_at of this VersionInfo.
        :rtype: datetime
        """
        return self._last_config_change_at

    @last_config_change_at.setter
    def last_config_change_at(self, last_config_change_at):
        """
        Sets the last_config_change_at of this VersionInfo.
        Contains the time stamp of the last change including changes like scaling or restarting the app. Since our versions are time based, this is currently equal to version.

        :param last_config_change_at: The last_config_change_at of this VersionInfo.
        :type: datetime
        """
        self._last_config_change_at = last_config_change_at

    @property
    def last_scaling_at(self):
        """
        Gets the last_scaling_at of this VersionInfo.
        Contains the time stamp of the last change to this app which was not simply a scaling or a restarting configuration.

        :return: The last_scaling_at of this VersionInfo.
        :rtype: datetime
        """
        return self._last_scaling_at

    @last_scaling_at.setter
    def last_scaling_at(self, last_scaling_at):
        """
        Sets the last_scaling_at of this VersionInfo.
        Contains the time stamp of the last change to this app which was not simply a scaling or a restarting configuration.

        :param last_scaling_at: The last_scaling_at of this VersionInfo.
        :type: datetime
        """
        self._last_scaling_at = last_scaling_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

