# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Fetch(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Fetch - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cache': 'bool',
            'executable': 'bool',
            'extract': 'bool',
            'uri': 'str'
        }

        self.attribute_map = {
            'cache': 'cache',
            'executable': 'executable',
            'extract': 'extract',
            'uri': 'uri'
        }

        self._cache = None
        self._executable = None
        self._extract = None
        self._uri = None

    @property
    def cache(self):
        """
        Gets the cache of this Fetch.
        Cache fetched artifact if supported by Mesos fetcher module

        :return: The cache of this Fetch.
        :rtype: bool
        """
        return self._cache

    @cache.setter
    def cache(self, cache):
        """
        Sets the cache of this Fetch.
        Cache fetched artifact if supported by Mesos fetcher module

        :param cache: The cache of this Fetch.
        :type: bool
        """
        self._cache = cache

    @property
    def executable(self):
        """
        Gets the executable of this Fetch.
        Set fetched artifact as executable

        :return: The executable of this Fetch.
        :rtype: bool
        """
        return self._executable

    @executable.setter
    def executable(self, executable):
        """
        Sets the executable of this Fetch.
        Set fetched artifact as executable

        :param executable: The executable of this Fetch.
        :type: bool
        """
        self._executable = executable

    @property
    def extract(self):
        """
        Gets the extract of this Fetch.
        Extract fetched artifact if supported by Mesos fetcher module

        :return: The extract of this Fetch.
        :rtype: bool
        """
        return self._extract

    @extract.setter
    def extract(self, extract):
        """
        Sets the extract of this Fetch.
        Extract fetched artifact if supported by Mesos fetcher module

        :param extract: The extract of this Fetch.
        :type: bool
        """
        self._extract = extract

    @property
    def uri(self):
        """
        Gets the uri of this Fetch.
        URI to be fetched by Mesos fetcher module

        :return: The uri of this Fetch.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this Fetch.
        URI to be fetched by Mesos fetcher module

        :param uri: The uri of this Fetch.
        :type: str
        """
        self._uri = uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

