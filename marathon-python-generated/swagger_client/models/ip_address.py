# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class IpAddress(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        IpAddress - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'discovery': 'Discovery',
            'groups': 'list[str]',
            'labels': 'object'
        }

        self.attribute_map = {
            'discovery': 'discovery',
            'groups': 'groups',
            'labels': 'labels'
        }

        self._discovery = None
        self._groups = None
        self._labels = None

    @property
    def discovery(self):
        """
        Gets the discovery of this IpAddress.
        Information useful for service discovery.

        :return: The discovery of this IpAddress.
        :rtype: Discovery
        """
        return self._discovery

    @discovery.setter
    def discovery(self, discovery):
        """
        Sets the discovery of this IpAddress.
        Information useful for service discovery.

        :param discovery: The discovery of this IpAddress.
        :type: Discovery
        """
        self._discovery = discovery

    @property
    def groups(self):
        """
        Gets the groups of this IpAddress.
        Array of network groups. One IP address can belong to zero or more network groups. The idea is that containers can only reach containers with which they share at least one network group.

        :return: The groups of this IpAddress.
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """
        Sets the groups of this IpAddress.
        Array of network groups. One IP address can belong to zero or more network groups. The idea is that containers can only reach containers with which they share at least one network group.

        :param groups: The groups of this IpAddress.
        :type: list[str]
        """
        self._groups = groups

    @property
    def labels(self):
        """
        Gets the labels of this IpAddress.
        Key value pair for meta data on that network interface.

        :return: The labels of this IpAddress.
        :rtype: object
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """
        Sets the labels of this IpAddress.
        Key value pair for meta data on that network interface.

        :param labels: The labels of this IpAddress.
        :type: object
        """
        self._labels = labels

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

